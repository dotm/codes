#HTML Element Structure:
  Basic element:
    <startTag attribute=value attribute=value> element body </endTag>
  Empty element:
    <tag attribute=value attribute=value>
  Boolean attribute:
    <tag attribute>
#Basic HTML Document Structure:
	<!DOCTYPE html>
	<html>
    <head>
      <title>The Webpage Title </title>
    </head>
    <body>
      page body goes here
    </body>
  </html>
  
#Basic of writing text:
  <h#> for header
  <p> for paragraph body
  <br> for break
#Text emphasis:
  <em> for weak emphasis
  <strong> for strong emphasis

#List:
    <ol>
      <li>Math</li>
      <li>Physics</li>
    </ol>
  <ol> for ordered list
  <ul> for unordered list
  <li> for the list points
#Definition List:
    <dl>
      <dt>HTML</dt>
        <dd>Abbreviation for HyperText Markup Language - a language used to make web pages.</dd>
      <dt>Dog</dt>
        <dd>Any carnivorous animal belonging to the family Canidae.</dd>
        <dd>The domesticated sub-species of the family Canidae, Canis lupus familiaris.</dd>
      <dt>Moo juice</dt>
    </dl>
	<dl> for definition list
	<dt> for definition terms 
  <dd> for definition descriptions

#Image (empty element)
    <img src='https://www.kasandbox.org/programming-images/animals/thumbs/komodo-dragon.png' alt='komodo dragon'>
#Map
    <img src="/wp-content/uploads/shapes.png" usemap="shapes-map">
    <map name="shapes-map">
      <area shape="rect" title="Square" coords="19,28,222,228" href="square.com" target="_blank" />
      <area shape="circle" title="Circle" coords="361,132,96" href="circle.com" target="_blank" />
    </map>
  you can use image map and area tag to create hyperlink inside image
    <area shape="rect" coords="x1,y1,x2,y2" href="link when area is clicked" target="_blank" alt="alternative text"/>
    <area shape="circle" coords="x,y,r" href="link when area is clicked" target="_blank" alt="alternative text">
  coords for rect: (x1,y1) for top left, (x2,y2) for bottom right
  coords for circle: (x,y) for center and r for radius

#Creating ID and Class:
  id and class is an attribute
    <h2 id="summer" class="section-header season">Summer</h2>
	to select an id use #
	to select a class use .

#Hyperlink (Anchor)
    <a href='html/reference'>hyperlink text</a>
    absolute path gives the location of a file or directory in reference to a root directory
	  fully qualified URLs:		<a href="http://www.youtube.com">Youtube</a>
	  if the the location is on the same server, you can use / as root instead of the server URL
    relative path is a path to a given file or directory starting from another file or directory
		e.g. <a href="assets/stylesheet.css">Assets</a>		is a relative path from current file
		e.g. <a href="/assets/stylesheet.css">Assets</a>		is an absolute path from root
  internal hyperlink (link to the same page) use id attribute in href
		<a href="#top">Jump to the top</a>
  stub URL: an internal hyperlink that goes nowhere
        <a href="#">stub link</a>
  you can use image instead of text as the anchor
      <a href="https://www.khanacademy.org"><img src="https://www.kasandbox.org/programming-images/cute/Heart.png"></a>
  add target="_blank" if you want the link to open at new tab
  
#Table:
    (tr) for each row, (th) as head data entry, (td) for body data entry
		colspan and rowspan attribute can be used to "merge" table cells
		scope attribute indicates with the values col, row, colgroup, and rowgroup
			whether a table header applies to a row or column. default value is col
	<table>
		<caption>Menu</caption>
		<thead>
			<tr>
				<th rowspan="2" scope="col">Meal</th>
				<th colspan='1' scope="col">Price</th>
      </tr>
    </thead>
		<tbody>
			<tr>
				<td>Rice</td>
				<td>3000</td>
      </tr>
		</tbody>
		<tfoot>
			<tr>
				<td>Total Price</td>
				<td>3000</td>
      </tr>
		</tfoot>
	</table>

#---------------------------------------------------------------------------------------------------
#Audio
  #single-source audio
    <audio src="music.mp3" type="audio/mpeg" controls autoplay loop preload="auto">
      Audio element is not supported by your browser
    </audio>
  #multi-sources audio
    <audio controls autoplay loop>
      <source src="music.mp3" type="audio/mpeg">
      <source src="music.ogg" type="audio/ogg; codecs=vorbis">
      Audio element is not supported by your browser.
      Please download the music <a href="music.mp3">here</a>.
    </audio>
    the page will try to render the sources top to bottom
      mp3, ogg, then the text with hyperlink
  #attributes
    controls, autoplay, and loop is a boolean attribute
    preload has 3 values: none, auto, metadata
	
#Video
  the video syntax is the same as audio element
  the type attribute contains container MIME type, video codecs, then audio codecs
  poster attribute allows us to specify an image, in the form of a URL, to be shown before a video is played. 
	<video src="mv.mp4" type="video/mp4" poster="movie-screenshot.jpg" controls autoplay loop>
		Video element is not supported by your browser
	</video>
	<video controls autoplay loop>
    <source src="mv.mp4"  type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'>
    <source src="mv.webm" type='video/webm; codecs="vp8, vorbis"'>
    <source src="mv.ogv"  type='video/ogg; codecs="theora, vorbis"'>
		Video element is not supported by your browser
	</video>
  you can embed a youtube video with inline frame instead of just showing text as the last option

#Inline Frames
  display content from the embedded HTML page on the current page
	<iframe src="contact.html" seamless></iframe>
  seamless attribute allows:
	allows styles from parent page to be inherited by the page in the <iframe> element
	allows links clicked on child page to be opened within the same window as the original page

#---------------------------------------------------------------------------------------------------
#Form
an action attribute is needed to tell the form where its contents will be sent to
	if the action attribute is omitted, the action is set to the current page.

method attribute tells the form how the data in it is going to be sent 
	the (default) value get latches the form information onto a web address
		use this if the form submission is short, passive (like a search engine query), or without sensitive information
	post (essentially) invisibly sends the form’s information
		use this if the form is lengthy, for updating data, or includes sensitive information (password).

other form attributes:
	accept-charset	Specifies the charset used in the submitted form (default: the page charset)
	autocomplete	Specifies if the browser should autocomplete the form (default: on)
	enctype			Specifies the encoding of the submitted data (default: is url-encoded)
	name			Specifies a name used to identify the form (for DOM usage: document.forms.name)
	novalidate		Specifies that the browser should not validate the form
	target			Specifies the target of the address in the action attribute (default: _self)
	
The <fieldset> element groups related data in a form.
The <legend> element defines a caption for the <fieldset> element.

	<form action="contactus.php" method="post">
	  <fieldset>
	   <legend>Personal information:</legend>
		<p>Name:</p>
		<p><input type="text" name="name" value="Yoshua"></p>
		<p><input type="password" name="password" placeholder="Type Password"></p>

		<p>Are you:</p>
		<p><input type="radio" name="areyou" value="male"> Male</p>
		<p><input type="radio" name="areyou" value="female"> Female</p>
	  </fieldset>	
		<p>Comments: </p>
		<p><textarea name="comments" rows="5" cols="20">Your comments</textarea></p>

		<p><input type="checkbox" name="agree"> I agree with the terms</p>
		<p><input type="checkbox" name="agree"> I agree to not post bullshit</p>
		<p><input type="submit"></p>															</form>

you can use (br) instead of multiple (p)
you can use label to label input
  <label for="email">Your Email</label>
  <input type="email" name="email">
		
#Input (empty element)
The input tag can take a multitude of guises, the most common ones are:
  <input type="text"> or simply <input>
    a standard textbox
    value attribute sets the initial text in the textbox
    placeholder attribute
  <input type="password">
  <input type="checkbox">
    a checkbox which can be toggled on and off
    can have a checked boolean attribute
  <input type="radio"> 
    user can only select one radio button in a group
      you can select multiple radio buttons with different NAME attribute
    can have a checked boolean attribute
  <input type="submit">
    value attribute control the text that appears on the button

#Textarea
textarea is, basically, a large, multi-line textbox. 
The anticipated number of rows and columns can be defined with rows and cols attributes, 
although you can manipulate the size to your heart’s content using CSS.

<textarea rows="5" cols="20">A big load of text</textarea>

Any text you choose to place between the opening and closing tags (in this case “a big load of text”) will form the initial value of the text area.
You can also just use placeholder

#Select and Option
works with the option tag to make drop-down select boxes

	<select>
		<option>Option 1</option>
		<option>Option 2</option>
		<option value="third option">Option 3</option>
	</select>

When the form is submitted, the value of the selected option will be sent. This value will be the text between the selected opening and closing option tag unless an explicit value is specified with the value attribute, in which case this will be sent instead. So, in the above example, if the first item is selected, “Option 1” will be sent, if the third item is selected, “third option” will be sent.
Similar to the checked attribute of checkboxes and radio buttons, an option tag can also have a selected attribute, to start off with one of the items already being selected, eg. <option selected>Rodent</option> would pre-select “Rodent” from the items.

#Names
all of the tags mentioned above will all be ignored without name
this is because the form fields need names
so to all of the fields, the attribute name needs to be added, e.g. <input type="text" name="rant">.

#---------------------------------------------------------------------------------------------------
#Abbreviation (abbr)
#Quotations
	(blockquote) for standalone multi-line quotations, (q) for shorter, in-line quotations
#Citations (cite)
#Code (code)
	(var) can be used for variables (which could be a variable in anything, not just in code - it could be a variable in an equation, for example),
	(samp) for sample output
	(kbd) / keyboard for user input.
#Preformatted text (pre)
pre takes notice of every character in it, including the white space 
other elements will ignore a consecutive space or a line-break
pre is most commonly used for blocks of code, where spacing, such as indentations, can be relevant.
	<pre><code>
	&lt;div id="intro"&gt;
		&lt;h1&gt;Some heading&lt;/h1&gt;
		&lt;p&gt;Some paragraph paragraph thing thing thingy.&lt;/p&gt;
	&lt;/div&gt;															</code></pre>
#Addresses
(address) should be used specifically for the contact details 
relating either to the entire web page (and so only used once) 
or to an article element 
It isn’t, as it might at first appear, for marking up any old address willy-nilly.

	<h3>Author contact details</h3>
	<address>
	<ul>
		<li>0123-456-7890</li>
		<li>author_dude@noplaceinteresting.com</li>
		<li>http://www.noplaceinteresting.com/contactme/</li>
	</ul>
	</address>

#Definition terms
(dfn) used to highlight the first use of a term. title attribute can be used to describe the term.

	<p>Bob's <dfn title="Dog">canine</dfn> mother 
	and <dfn title="Horse">equine</dfn> father 
	sat him down and carefully explained that 
	he was an <dfn title="A mutation that combines two or more sets of chromosomes from different species">allopolyploid</dfn> organism.	</p>

#Bi-directional text
bdo can be used to reverse the direction of the text, and to display languages that read right to left. 
The value of the required attribute dir (direction) can be ltr (left to right) or rtl (right to left).
	<bdo dir="rtl">god lmth</bdo>
	
#Editorial
ins and del are used to display editorial insertions and deletions respectively. 
Strictly speaking, they aren’t limited to text and can be used over whole swathes of content 
but, typically, they are used in moderation just like “Track Changes” feature in word processors tend to be.
They can have the attributes datetime to indicate when the edit was made and cite, to point to a description as to why the edit has been made.

<p>I have decided to <del datetime="2013-01-26">decrease</del> <ins cite="http://www.icecreamforall.com/changeofpolicy/">increase</ins> 
the amount of free ice cream that the State will provide for its citizens.</p>

#---------------------------------------------------------------------------------------------------
#Sectioning
used to create semantic div

#Articles and Sections

An article element can be used to mark up a standalone section of content. This could be used just once, if you think of a blog post as an article, for example, or a number of times, if you imagine replicating a traditional newspaper page with numerous articles.
A section element represents a more general section and could be used to split up an article, or to represent chapters, for example.

	<body>
		<article>
			<header>
				<h1>Alternatively&hellip;</h1>
				<p>[An introduction]</p>
			</header>
			<section id="main_content">
				<p>[Content]</p>
			</section>
			<footer>
				<p>[End notes]</p>
			</footer>
		</article>
		<footer>
			<p>[Copyright bumf]</p>
		</footer>
	</body>

The footer is the footer of the section in which it is contained. 
So, in the above example, the first footer is the footer of the article 
and the second footer is the footer of the page.

Asides

An aside can be used to represent content that is related the content surrounding it. Think of pull-quotes or snippets of related information in an article:


<section id="main_content">
    <h1>Tixall</h1>
    <p>[All about Tixall]</p>
    <aside>
        <h2>Tixall Obelisk</h2>
        <p>[A short note about Tixall Obelisk]</p>
    </aside>
    <p>[Maybe a bit more about Tixall]</p>
</section>
While we’re at this structure-love, if you want to include figures, there happens to be two tags for doing just that:

<figure>
    <img src="obelisk.jpg">
    <figcaption>Tixall Obelisk</figcaption>
</figure>
Note that the img element doesn’t need an alt attribute IF the figcaption (figure caption) does that job.

#Navigation
used to mark up a group of navigation links:

<nav id="main_nav">
    <ul>
        <li><a href="/tutorials/">Tutorials</a></li>
        <li><a href="/reference/">Reference</a></li>
        <li><a href="/articles/">Articles</a></li>
        <li><a href="/about/">About us</a></li>
    </ul>
</nav>

If you want to style these new HTML 5 elements (and you probably do, right? It’s much nicer than using <div id="content">..., etc) you will experience a problem in older browsers, most notably Internet Explorer versions 8 and earlier, that don’t understand these tags.

HTML5Shiv can come to your rescue, however; a small piece of JavaScript, slotted in to your head element, that teaches the remedial browsers and holds their hands so that you can use new HTML 5 tags and style them up to your heart’s content with CSS.

It’s your call if you want to use a JavaScript fudge or stick with the safe old (and, again, perfectly valid) but semantically poorer headings and divs approach.
Many sites chooses the former. Because HTML 5’s loveliness just about outweighs a hack’s ugliness.

#---------------------------------------------------------------------------------------------------
#Meta tags ???????????????????????
