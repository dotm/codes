------------------------------------------------------------------------------
#Create new project: rails new sampleapp
  #using PGSQL:
    $ rails new sampleapp -d postgresql
    $ cd sampleapp
    insert database username and password to config/routes.rb
    $ bin/rails db:create
#Run server: bin/rails server
#Check routes: bin/rails routes
#Run console: bin/rails console [--sandbox] [test]
#Heroku
  #create: heroku create
  #push: git push heroku master

#Create Static Page
  *create the controller:
    $ bin/rails generate controller Welcome index
  *insert static page:
    vim app/views/welcome/index.html.erb
  *insert to config/routes.rb:
    !config/routes.rb
      Rails.application.routes.draw do
        get 'welcome/index'
        root 'welcome#index'            #change root route (optional)
      end
  *Add Link to index of the main controller (if any) (e.g. article)
  
#Create Form
  #For New Action
      by default, this form will try to POST to /articles/new
        but you must POST to /articles to call the articles#create action (check routes)
        the url option below is added to POST to articles_path that call the create action by default (check routes)
    <%= form_for :article, url: articles_path do |f| %>
      <p>
        <%= f.label :title %><br>
        <%= f.text_field :title %>
      </p>
      <p>
        <%= f.label :text %><br>
        <%= f.text_area :text %>
      </p>
      <p>
        <%= f.submit %>
      </p>
    <% end %>
  #For Edit Action
    <%= form_for @article do |f| %>
      // you could reuse the form layout from new action as it is or with some parts removed
    <% end %>

#Add Link using link_to and (Path and URL) helper
  <%= link_to 'My Blog', controller: 'articles' %>
  <%= link_to 'New article', new_article_path %>
    If you want to link to an action in the same controller, 
      you don't need to specify the :controller option,
      as Rails will use the current controller by default.
  <% @articles.each do |article| %>
    <tr>
      <td><%= article.title %></td>
      <td><%= article.text %></td>
      <td><%= link_to 'Show', article_path(article) %></td>
      <td><%= link_to 'Edit', edit_article_path(article) %></td>
      <td><%= link_to 'Destroy', article_path(article),
              method: :delete,
              data: { confirm: 'Are you sure?' } %></td>
    </tr>
  <% end %>

#Add Validation
  *edit the model:
    !app/models/article.rb
    class Article < ApplicationRecord
      validates :title, presence: true, length: { minimum: 5 }
    end
  *update create method to add case when validation fail: (you can skip this if you use scaffold)
    def create
      @article = Article.new(article_params)
     
      if @article.save        #if save is successful (validation OK) this will return true
        redirect_to @article
      else
        render 'new'          #render method is used so the @article object is passed back to the new template
      end
    end
  *add this to the 'new' method view to display validation errors: (you can skip this if you use scaffold)
    !app/views/articles/new.html.erb
    <% if @article.errors.any? %>
      <div id="error_explanation">
        <h2>
          <%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:
        </h2>
        <ul>
          <% @article.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
        </ul>
      </div>
    <% end %>
  *Rails automatically wraps fields that contain an error
    with a div with class field_with_errors.
    You can define a css rule to make them standout.
    (you can skip this if you use scaffold)
    
#Using Partials (to clean view duplication)
  #by convention, partial files are prefixed with an underscore.
  *create the partial file (and fill it): touch app/views/articles/_form.html.erb
  *using the partial file in view:
    !app/views/articles/xxx.html.erb    #where xxx can be any view of articles (new, edit, etc.)
    <%= render 'form' %>
#Using Partials in different view directory
  *create the partial file: touch app/views/comments/_form.html.erb
  *using the partial file in a different view:
    !app/views/articles/xxx.html.erb    #notice that the partial in the comments' view is rendered in an articles' view
    <%= render 'comments/form' %>
    
#Create Basic CRUD with Scaffold
  *create the scaffold: bin/rails generate scaffold Article title:string text:text
  *migrate the database: bin/rails db:migrate
  #CREATE with New and Create Action
    *Add Validation if necessary
  #UPDATE with Edit Action
    *Add Validation if necessary

#Create Basic CRUD
  *create the model: bin/rails generate model Article title:string text:text
  *migrate the database: bin/rails db:migrate
  *add routes:
    !config/routes.rb
    Rails.application.routes.draw do
      resources :articles
    end
  *create the controller: bin/rails generate controller Articles
  #Summary
    *check bin/rails routes
    *add action to controller
    *create the view (if necessary)
    *create form in view (if necessary)
    *add link in view (if necessary)
    *save or update data with controller action (if necessary)
    *add validation (if necessary)
    *refactor using partial (if necessary)
  #CREATE with New and Create Action
    *add action to controller:
      class ArticlesController < ApplicationController
        def new
          @article = Article.new
        end
        ...
    *create the view:
      $ touch app/views/articles/new.html.erb
    *Create Form in app/views/articles/new.html.erb
    *save data using create action in controller:
      class ArticlesController < ApplicationController
        ...
        def create
          @article = Article.new(article_params)              #the 'Article' is from the article model
         
          #use this when no validation
          @article.save
          redirect_to @article
          #use this if with validation
          if @article.save
            redirect_to @article
          else
            render 'new'
          end
        end
         
        private
          def article_params
            params.require(:article).permit(:title, :text)    #rails use strong parameters
          end
        ...
    *Add Link to index with articles_path
    *Add Validation if necessary
  #READ with Show Action
    *add action to controller:
      class ArticlesController < ApplicationController
        def show
          @article = Article.find(params[:id])
        end
    *create the view:
      $ touch app/views/articles/show.html.erb
      $ vim app/views/articles/show.html.erb
      !app/views/articles/show.html.erb
      <p>
        <strong>Title:</strong><%= @article.title %>
      </p>       
      <p>
        <strong>Text:</strong><%= @article.text %>
      </p>
    *Add Link to
      index with articles_path
      edit with edit_article_path(@article)
      destroy with
        article_path(@article), method: :delete, data: { confirm: 'Are you sure?' }
  #READ ALL with Index action
    *add action to controller:
      class ArticlesController < ApplicationController
        def index
          @articles = Article.all
        end
    *create the view:
      $ touch app/views/articles/index.html.erb
      $ vim app/views/articles/index.html.erb
      !app/views/articles/index.html.erb
      <h1>Listing articles</h1>       
      <table>
        <tr>
          <th>Title</th>
          <th>Text</th>
        </tr>
       
        <% @articles.each do |article| %>
          <tr>
            <td><%= article.title %></td>
            <td><%= article.text %></td>
            <td><%= link_to 'Show', article_path(article) %></td>
          </tr>
        <% end %>
      </table>
    *Add Link to
      new with new_article_path
     for each article:
      show with article_path(article)
      edit with edit_article_path(article)
      destroy with article_path(article)
      <% @articles.each do |article| %>
        <tr>
          <td><%= article.title %></td>
          <td><%= article.text %></td>
          <td><%= link_to 'Show', article_path(article) %></td>
          <td><%= link_to 'Edit', edit_article_path(article) %></td>
          <td><%= link_to 'Destroy', article_path(article),
                  method: :delete,
                  data: { confirm: 'Are you sure?' } %></td>
        </tr>
      <% end %>
  #UPDATE with Edit and Update Action
    *add action to controller:
      def edit
        @article = Article.find(params[:id])
      end
    *create the view:
      $ touch app/views/articles/edit.html.erb
    *Create Form in app/views/articles/edit.html.erb
    *Add Link to index with articles_path
    *update data using update action in controller:
      class ArticlesController < ApplicationController
        ...
        def update
          @article = Article.find(params[:id])                #the 'Article' is from the article model
         
          #use this when no validation
          @article.update(article_params)                     
            #you don't have to update all the attributes (you can update partially)
            #but if you update partially, the article_params of create and update must be different and separated
          redirect_to @article
          #use this if with validation
          if @article.update(article_params)
            redirect_to @article
          else
            render 'edit'
          end
        end
         
        private
          def article_params
            params.require(:article).permit(:title, :text)    #same parameters as create params
          end
        ...
    *Add Validation if necessary
  #DELETE with Destroy Action
    *add action to controller:
      def destroy
        @article = Article.find(params[:id])
        @article.destroy
       
        redirect_to articles_path
      end
    *Add Link to destroy

#Second Model with Association
  *create the model: bin/rails generate model Comment commenter:string body:text article:references
    #this will create "belongs_to :article" in the comment model and a migration files (along with test-related stuffs)
  *migrate the database: bin/rails db:migrate
  *complete the model associations:
    !app/models/comment.rb    
    class Comment < ApplicationRecord
      belongs_to :article                       #this is auto-generated
    end
    !app/models/article.rb
    class Article < ApplicationRecord           #add this manually
      has_many :comments, dependent: :destroy   #dependent is used so that when an article is deleted, all associate
    end
  *add routes:
    !config/routes.rb
    Rails.application.routes.draw do
      resources :articles do
        resources :comments
      end
    end
  *create the controller: bin/rails generate controller Comments
  #CREATE with Create action
    #we don't need the new action since comment will be inside articles/show view
    *Create Form (in articles/show view):
      !app/views/articles/show.html.erb
      <h2>Add a comment:</h2>
      <%= form_for([@article, @article.comments.build]) do |f| %>
        <p>
          <%= f.label :commenter %><br>
          <%= f.text_field :commenter %>
        </p>
        <p>
          <%= f.label :body %><br>
          <%= f.text_area :body %>
        </p>
        <p>
          <%= f.submit %>
        </p>
      <% end %>
    *save data using create action in controller:
      !app/controllers/comments_controller.rb
      class CommentsController < ApplicationController
        def create
          @article = Article.find(params[:article_id])
          @comment = @article.comments.create(comment_params)
          redirect_to article_path(@article)
        end
       
        private
          def comment_params
            params.require(:comment).permit(:commenter, :body)
          end
      end
  #READ
    *show comments in the articles/show view:
      !app/views/articles/show.html.erb
      <h2>Comments</h2>
      <% @article.comments.each do |comment| %>
        <p>
          <strong>Commenter:</strong>
          <%= comment.commenter %>
        </p>
       
        <p>
          <strong>Comment:</strong>
          <%= comment.body %>
        </p>
      <% end %>
  #DELETE
    *add action to controller:
      !app/controllers/comments_controller.rb
      class CommentsController < ApplicationController
        def destroy
          @article = Article.find(params[:article_id])
          @comment = @article.comments.find(params[:id])
          @comment.destroy
          redirect_to article_path(@article)
        end
    *Add Link to destroy (in articles/show view):
      <%= link_to 'Destroy Comment', [comment.article, comment], method: :delete, data: { confirm: 'Are you sure?' } %>
  #Refactor as necessary

#Basic Authentication (using http_basic_authenticate_with)
  #with except (preferred since it gives minimum set of permissions)
    !app/controllers/articles_controller.rb
    class ArticlesController < ApplicationController
      http_basic_authenticate_with name: "dhh", password: "secret", except: [:index, :show]
  #with only
    !app/controllers/comments_controller.rb
    class CommentsController < ApplicationController 
      http_basic_authenticate_with name: "dhh", password: "secret", only: :destroy

------------------------------------------------------------------------------
#Web request from console
  app.get "/post/new"
  p app.response.body