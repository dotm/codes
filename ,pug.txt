#Overview
//- template.pug
p #{name}'s Pug source code!

------------------------------
The pug.compile() family of function will compile the Pug source code into a JavaScript function 
  that takes a data object (called “locals”) as argument. 
Call that resultant function with your data, 
  and it will return a string of HTML rendered with your data.

#Compile then render with compileFile()
//- compile.js
const pug = require('pug');

// Compile the source code
const compiledFunction = pug.compileFile('template.pug');

// Render a set of data with the "locals" data object
console.log(compiledFunction({
  name: 'Timothy'
}));
// "<p>Timothy's Pug source code!</p>"

--------------------------------
The pug.render() family of functions combine compiling and rendering into one step. 
However, the template function will be re-compiled every time render is called, which might impact performance. 
Alternatively, you can use the cache option with render, 
  which will automatically store the compiled function into an internal cache.

#Compile and render with render()

const pug = require('pug');

// Compile template.pug, and render a set of data
console.log(pug.renderFile('template.pug', {
  name: 'Timothy'
}));
// "<p>Timothy's Pug source code!</p>"

#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
#Language Reference

#-------------------------------------------------------------------------------------------
#Attributes
    a(class='button', href='google.com') Google  :=  a(class='button' href='google.com') Google
      // <a class="button" href="google.com">Google</a>
#with variable
    - var authenticated = true
    body(class=authenticated ? 'authed' : 'anon')
      // <body class="authed"></body>
    
#Multiline Attributes
    input(
      type='checkbox'
      name='agreement'
      checked
    )
      // <input type="checkbox" name="agreement" checked="checked" />
#with template literals
    input(data-json=`
      {
        "very-long": "piece of ",
        "data": true
      }
    `)
    <input data-json="
      {
        &quot;very-long&quot;: &quot;piece of &quot;,
        &quot;data&quot;: true
      }
    " />
  
#Quoted Attributes
    div(class='div-class', (click)='play()')
    div(class='div-class' '(click)'='play()')
      // <div class="div-class" (click)="play()"></div>
  If your attribute name contains odd characters that might interfere with JavaScript syntax, 
    either quote it using "" or '', or use commas to separate different attributes. 
    Examples of such characters include [] and ()

#Attribute Interpolation
    - var url = 'pug-test.html';
    - var btnType = 'info'
    - var btnSize = 'lg'
    a(href='lala/' + url) Link
      // <a href="lala/pug-test.html">Link</a>
    a(href=url) link
      // <a href="pug-test.html">Link</a>
    button(type='button' class='btn btn-' + btnType + ' btn-' + btnSize)
    button(type='button' class=`btn btn-${btnType} btn-${btnSize}`)
      // <button class="btn btn-info btn-lg" type="button"></button>

#Unescaped Attributes
    div(escaped="<code>")
      // <div escaped="&lt;code&gt;"></div>
    div(unescaped!="<code>")
      // <div unescaped="<code>"></div>
  By default, all attributes are escaped to prevent attacks such as cross site scripting
  
#Boolean Attributes
    input(type='checkbox' checked)
    input(type='checkbox' checked=true)
      // <input type="checkbox" checked="checked" />
    input(type='checkbox' checked=false)
      // <input type="checkbox" />
    input(type='checkbox' checked=true.toString())
      // <input type="checkbox" checked="true" />
    
    doctype html
    input(type='checkbox' checked)
    input(type='checkbox' checked=true)
      // <input type="checkbox" checked>
    input(type='checkbox' checked=false)
      // <input type="checkbox">
    input(type='checkbox' checked=true && 'checked')
      // <input type="checkbox" checked="checked">
  If the doctype is html Pug knows not to mirror the attribute 
    and uses the terse style (understood by all browsers).

#Style Attributes
    a(style={color: 'red', background: 'green'})
      // <a style="color:red;background:green;"></a>
  The style attribute can be a string (like any normal attribute)
    but it can also be an object, 
    which is handy when parts of the style are generated by JavaScript.

#Class Attributes
    - var classes = ['foo', 'bar', 'baz']
    a(class=classes)
      // <a class="foo bar baz"></a>
    a.bang(class=classes class=['bing'])
      // <a class="bang foo bar baz bing"></a>
  The class attribute can be a string (like any normal attribute)
    but it can also be an array of class names,
    which is handy when generated from JavaScript.
  The class attribute may also be repeated to merge arrays
    - var currentUrl = '/about'
    a(class={active: currentUrl === '/'} href='/') Home
      // <a href="/">Home</a>
    a(class={active: currentUrl === '/about'} href='/about') About
      // <a class="active" href="/about">About</a>
  It can also be an object mapping class names to true or false values, which is useful for applying conditional classes
#Class Literal
    a.button
      // <a class="button"></a>
#ID Literal
    a#main-link
      <a id="main-link"></a>
#Multiple Literal
    a.btn.btn-lg
      // <a class="btn btn-lg"></a>
    a.btn#main
      // <a class="btn" id="main"></a>
#Div
    .content
      // <div class="content"></div>
    #content
      // <div id="content"></div>
    #foo.bar.baz
      // <div class="bar baz" id="foo"></div>
  Since div's are such a common choice of tag, it is the default if you omit the tag name
  

#And attributes
    div#foo(data-bar="foo")&attributes({'data-foo': 'bar'})
      // <div id="foo" data-bar="foo" data-foo="bar"></div>
  The &attributes syntax can be used to explode an object into attributes of an element.
    - var attributes = {};
    - attributes.class = 'baz';
    div#foo(data-bar="foo")&attributes(attributes)
      // <div class="baz" id="foo" data-bar="foo"></div>
  The object does not have to be an object literal. 
    It can also just be a variable that has an object as its value.
    see also Mixin Attributes
  Attributes applied using &attributes are not automatically escaped. 
    You must be sure to sanitize any user inputs to avoid XSS.
    This is done for you if you are passing in attributes from a mixin call.
    
#-------------------------------------------------------------------------------------------
#Case
The case statement is a shorthand for JavaScript’s switch statement

    - var friends = 10
    case friends
      when 0
        p you have no friends
      when 1
        p you have a friend
      default
        p you have #{friends} friends
    
While fall through happens whenever a break statement is not explicitly included in JavaScript,
  in Pug it only happens when a block is completely missing.
    case friends
      when 0
      when 1
        p you have very few friends
      default
        p you have #{friends} friends
        
If you would like to not output anything in a specific case, add an explicit unbuffered break:
    case friends
      when 0
        - break
      when 1
        p you have very few friends
      default
        p you have #{friends} friends
        
Block expansion may also be used:
    case friends
      when 0: p you have no friends
      when 1: p you have a friend
      default: p you have #{friends} friends

#-------------------------------------------------------------------------------------------
#Code

#Unbuffered Code
    - for (var x = 0; x < 3; x++)
    li item
    <li>item</li>
    <li>item</li>
    <li>item</li>
  Unbuffered code does not add any output directly
  Pug also supports block unbuffered code:
    -
      var list = ["Uno", "Dos", "Tres",
              "Cuatro", "Cinco", "Seis"]
    each item in list
      li= item
    <li>Uno</li>
    <li>Dos</li>
    <li>Tres</li>
    <li>Cuatro</li>
    <li>Cinco</li>
    <li>Seis</li>

#Buffered Code
    p
      = 'This code is <escaped>!'
    <p>This code is &lt;escaped&gt;!</p>
  Buffered code outputs the result of evaluating the JavaScript expression in the template. 
  For security, it is first HTML escaped
  It can also be written inline with attributes, and supports the full range of JavaScript expressions:
    p= 'This code is' + ' <escaped>!'
    <p>This code is &lt;escaped&gt;!</p>
#Unescaped Buffered Code
    p!= 'This code is <strong>not</strong> escaped!'
    p
      != 'This code is <strong>not</strong> escaped!'
    <p>This code is <strong>not</strong> escaped!</p>
    
#-------------------------------------------------------------------------------------------
#Comments

#Buffered Comments
    // just some paragraphs
    <!-- just some paragraphs-->
  Buffered comments produce HTML comments in the rendered page
#Unbuffered Comments
  //- will not output within markup
  
#Block Comments
    body
      //-
        Comments for your template writers.
        Use as much text as you want.
      //
        Comments for your HTML readers.
        Use as much text as you want.
    <body><!--Comments for your HTML readers.
    Use as much text as you want.--></body>

#Conditional Comments
    <!--[if gt IE 8]><!-->
    <html lang="en">
    <!--<![endif]-->
  Pug does not have any special syntax for conditional comments,
    but since all lines beginning with < are treated as plain text,
    normal HTML-style conditional comments will do fine.

#-------------------------------------------------------------------------------------------
#Conditionals

unless user.isAnonymous
  p You're logged in as #{user.name}
if !user.isAnonymous
  p You're logged in as #{user.name}
  
- var user = { description: 'foo bar baz' }
- var authorised = false
#user
  if user.description
    h2.green Description
    p.description= user.description
  else if authorised
    h2.blue Description
    p.description.
      User has no description,
      why not add one...
  else
    h2.red Description
    p.description User has no description      
<div id="user">
  <h2 class="green">Description</h2>
  <p class="description">foo bar baz</p>
</div>  

#-------------------------------------------------------------------------------------------
#Iteration
  The object or array to iterate over is just plain JavaScript
    so it can be a variable, the result of a function call, etc.


#each
  for := each
  #Iterate over array element
    ul
      each val in [1, 2, 3, 4, 5]
        li= val
  #Iterate over array element with index
    ul
      each val, index in ['zero', 'one', 'two']
        li= index + ': ' + val
  #Iterate over object with with keys
  ul
    each val, key in {1:'one',2:'two',3:'three'}
      li= key + ': ' + val
#each else
  else block will be executed if the array or object does not contain values to be iterated over.
    ul
      each val in values
        li= val
      else
        li There are no values

#while
  - var n = 0;
  ul
    while n < 4
      li= n++
      
#-------------------------------------------------------------------------------------------
#Interpolation

#String Interpolation, Escaped
    - var title = "On Dogs: Man's Best Friend";
    - var author = "enlore";
    - var theGreat = "<span>escape!</span>";
    h1= title
    p Written with love by #{author}
    p This will be safe: #{theGreat}
  the code in between #{ and } is evaluated, escaped,
    and the result buffered into the output of the template being rendered.
  this can be any valid Javascript expression, so you can do whatever feels good.
    e.g. p This is #{msg.toUpperCase()}
  
  Pug is smart enough to figure out where the expression ends, so you can even include } without escaping.
    p No escaping for #{'}'}!
    // <p>No escaping for }!</p>
  If you need to include verbatim #{, you can either escape it or use interpolation.
    p Escaping works with \#{interpolation}
      <p>Escaping works with #{interpolation}</p>
    p Interpolation works with #{'#{interpolation}'} too!
      <p>Interpolation works with #{interpolation} too!</p>

#String Interpolation, Unescaped
    - var riskyBusiness = "<em>Some of the girls are wearing my mother's clothing.</em>";
    .quote
      p Joel: !{riskyBusiness}
  // will return
    <div class="quote">
      <p>Joel: <em>Some of the girls are wearing my mother's clothing.</em></p>
    </div>

#Tag Interpolation
  Interpolation works not only on JavaScript values, 
    but on Pug as well using the tag interpolation syntax.
  Wrap an inline Pug tag declaration in #[ and ]
    and it’ll be evaluated and buffered into the content of its containing tag.
  The tag interpolation syntax is especially useful for inline tags,
    where whitespace before and after the tag is significant.
    By default, however, Pug removes all spaces before and after tags.
    See Whitespace Control to handle this issue

  p.
    Suddenly there is a #[strong strongly worded phrase] that cannot be
    #[em ignored].
  <p>This is a very long and boring paragraph that spans multiple lines. Suddenly there is a <strong>strongly worded phrase</strong> that cannot be
    <em>ignored</em>.</p>
    
  p.
    And here's an example of an interpolated tag with an attribute:
    #[q(lang="es") ¡Hola Mundo!]
  <p>And here's an example of an interpolated tag with an attribute:
    <q lang="es">¡Hola Mundo!</q></p>

#-------------------------------------------------------------------------------------------
#Pug Tags

#Tags
    ul
      li Item A
      li Item B
      li Item C
    <ul>
      <li>Item A</li>
      <li>Item B</li>
      <li>Item C</li>
    </ul>
  By default, text at the start of a line (or after only white space) represents an html tag.
  Indented tags are nested, creating the tree like structure of html.
  
#Self Closing Tags
    img
      <img/>
  Pug knows which elements are self closing
    and will automatically self-close them
    unless you use the XML doctype.
  You can also explicitly self close a tag by simply appending the / character.
    foo/
    foo(bar='baz')/
      <foo/>
      <foo bar="baz" />

#Block Expansion
    a: img
      <a><img/></a>
    ol: li: a: img
      <ol><li><a><img/></a></li></ol>
  To save space, Pug provides an inline syntax for nested tags.

#Rendered Whitespace
  Whitespace is removed from the beginning and end of tags,
    so that you have control over whether the rendered HTML elements touch or not.
  Whitespace control is generally handled via plain text.

#-------------------------------------------------------------------------------------------
#Plain Text
  Pug provides four ways of getting plain text directly into the rendered HTML. 
    They are useful in different situations. 
  Plain text does still use tag and string interpolation, 
    but the first word on the line is not a Pug tag. 
  And because plain text is not escaped, you can also include literal HTML.

#Inline in a Tag
    p This is plain old <em>text</em> content.
    <p>This is plain old <em>text</em> content.</p>
#Literal HTML
    <img>
  Whole lines are also treated as plain text when they begin with a left angle bracket (<)
#Piped Text
    p
      | The pipe always goes at the beginning of its own line,
      | not counting indentation.
    <p>The pipe always goes at the beginning of its own line, not counting indentation.</p>
#Block in a Tag
  Often you might want large blocks of text within a tag. 
    e.g. writing JavaScript and CSS code in the script and style tags.
  To do this, just add a . right after the tag name, 
    or after the closing parenthesis, if the tag has attributes.
  There should be no space between the tag and the dot.
  Plain text contents of the tag must be indented one level:
  
  script.
    if (usingPug)
      console.log('you are awesome')
    else
      console.log('use pug')
  // will return
  <script>
    if (usingPug)
      console.log('you are awesome')
    else
      console.log('use pug')
  </script>

  You can also create a dot block of plain text after other tags within the parent tag:
  div
    p This text belongs to the paragraph tag.
    br
    .
      This text belongs to the div tag.
  // will return
  <div>
  <p>This text belongs to the paragraph tag.</p><br/>This text belongs to the div tag.</div>
  
#-------------------------------------------------------------------------------------------
#Whitespace Control
  You just need to remember two main points about how whitespace works. When compiling to HTML:
    Pug removes indentation, and all whitespace between elements.
    Pug preserves whitespace within elements, including:
      all whitespace in the middle of a line of text
      leading whitespace beyond the block indentation
      trailing whitespace
      line breaks within a plain text block, or between consecutive piped lines

  So. Pug drops the whitespace between tags, but keeps the whitespace inside them.
  The value here is that it gives you full control over whether tags and/or plain text should touch.
  It even lets you place tags in the middle of words.
      | You put the em
      em pha
      | sis on the wrong syl
      em la
      | ble.
        // You put the em<em>pha</em>sis on the wrong syl<em>la</em>ble.
        
  The trade-off is that it requires you to think about and take control over whether tags and text touch.
  
    a ...sentence ending with a link
    | .
    <a>...sentence ending with a link</a>.
  If you need the text and/or tags to touch this is easy,
    as it’s basically what happens unless you tell Pug otherwise.
    
  If you need to add space, you have a few options:
#Recommended Solutions
  #Piped
      | Don't
      |
      button#self-destruct touch
      |
      | me!
        // Don't <button id="self-destruct">touch</button> me!
    You could add one or more empty piped lines — a pipe with either spaces or nothing after it.
      This will insert whitespace in the rendered HTML.
  #Tag interpolation (literal HTML)
      p.
        Using regular tags can help keep your lines short,
        but interpolated tags may be easier to #[em visualize]
        whether the tags and text are whitespace-separated.
      <p>Using regular tags can help keep your lines short, but
      interpolated tags may be easier to <em>visualize</em> whether
      the tags and text are whitespace-separated.</p>
    If your inline tags don’t require many attributes, 
      you may find it easiest to use tag interpolation, or literal HTML, within a plain text block.
#Not recommended
    | Hey, check out                                      //- Note the trailing space
    a(href="http://example.biz/kitteh.png") this picture
    |  of my cat!                                         //- Note the leading space
  Depending on where you need the whitespace,
    you could add an extra space at the beginning of the text
      (after the block indentation, pipe character, and/or tag).
    Or you could add a trailing space at the end of the text.
  The above solution works perfectly well, but is admittedly perhaps a little dangerous:
    Many code editors by default will remove trailing whitespace on save.
    You and all your contributors may have to configure your editors to prevent automatic trailing whitespace removal.
    
#-------------------------------------------------------------------------------------------
#Includes
    include includes/head.pug
  Includes allow you to insert the contents of one Pug file into another.
  The path of the included file, if specified absolutely (e.g. include /root.pug),
    is resolved by prepending options.basedir to the file name provided.
  Otherwise, the path is relative to the current file being compiled.
#Including Plain Text
    style
      include style.css
    script
      include script.js
  Including files that are not Pug just includes the raw text.
#Including Filtered Text
    include:markdown-it article.md
  You can combine filters with includes to filter things as you include them.

Example:
--------------------------------------
!index.pug
  doctype html
  html
    include includes/head.pug
    body
      h1 My Site
      p Welcome to my super lame site.
      include includes/foot.pug
--------------------------------------
!includes/head.pug
  head
    title My Site
    script(src='/javascripts/jquery.js')
    script(src='/javascripts/app.js')
--------------------------------------
!includes/foot.pug
  footer#footer
    p Copyright (c) foobar
--------------------------------------
// will return
  <!DOCTYPE html>
  <html>

  <head>
    <title>My Site</title>
    <script src="/javascripts/jquery.js"></script>
    <script src="/javascripts/app.js"></script>
  </head>

  <body>
    <h1>My Site</h1>
    <p>Welcome to my super lame site.</p>
    <footer id="footer">
      <p>Copyright (c) foobar</p>
    </footer>
  </body>

  </html>

#-------------------------------------------------------------------------------------------
#Mixins
  mixins allow you to create reusable blocks of Pug.
    //- Declaration
    mixin list
      ul
        li foo
        li bar
        li baz
    //- Use
    +list
    
    //- Result
    <ul>
      <li>foo</li>
      <li>bar</li>
      <li>baz</li>
    </ul>

#Mixin with arguments
  mixins are compiled to functions and can take arguments:
    mixin pet(name)
      li.pet= name
    ul
      +pet('cat')
      +pet('dog')
      +pet('pig')
    
    //- Result
    <ul>
      <li class="pet">cat</li>
      <li class="pet">dog</li>
      <li class="pet">pig</li>
    </ul>

#Mixin Blocks
  mixins can also take a block of pug to act as the content:
    mixin article(title)
      .article
        .article-wrapper
          h1= title
          if block
            block
          else
            p No content provided
    +article('Hello world')
      p This is my
      p Amazing article

    //- Result
    <div class="article">
      <div class="article-wrapper">
        <h1>Hello world</h1>
        <p>This is my</p>
        <p>Amazing article</p>
      </div>
    </div>
    
#Mixin Attributes
  Mixins also get an implicit attributes argument taken from the attributes passed to the mixin:
    mixin link(href, name)
      //- attributes == {class: "btn"}
      a(class!=attributes.class href=href)= name
    +link('/foo', 'foo')(class="btn")
    <a class="btn" href="/foo">foo</a>
  You can also use mixins with &attributes:
    mixin link(href, name)
      a(href=href)&attributes(attributes)= name
    +link('/foo', 'foo')(class="btn")
    <a class="btn" href="/foo">foo</a>
  
  The values in attributes by default are already escaped
    so you should use != to avoid escaping them a second time.
  The syntax +link(class="btn") is also valid and equivalent to +link()(class="btn")
    since Pug try to detect if parentheses contents are attributes or arguments
    but we encourage you to use the second syntax as you pass explicitly no arguments
      and you ensure the first parenthesis is the arguments list.

#Rest Arguments
  You can write mixins that take an unknown number of arguments using the “rest arguments” syntax:
  mixin list(id, ...items)
    ul(id=id)
      each item in items
        li= item
  +list('my-list', 1, 2, 3, 4)
  //- Result
  <ul id="my-list">
    <li>1</li>
    <li>2</li>
    <li>3</li>
    <li>4</li>
  </ul>

#-------------------------------------------------------------------------------------------
#Template Inheritance
  Pug supports template inheritance via the block and extends keywords.
  A block is simply a “block” of Pug that may be replaced within a child template.
    This process is recursive.
  Pug blocks can provide default content if desired (see block scripts below)
  To extend the layout, create a new file and use the extends directive, giving the path.
    You may now define one or more blocks that will override the parent block content,
    note that here the foot block is not redefined and will output “some footer content”.
  It’s also possible to override a block to provide additional blocks for overriding.
    (See sub-layout.pug)
    but the child template could just override content all together.
#Block append / prepend
  Pug allows you to replace (default), prepend, or append blocks
  When using block append or block prepend the block keyword is optional
  
#Common mistakes
  Only named blocks and mixin definitions can appear at the top (unindented) level of an extending template.
    This is important because the parent templates define the overall page structure,
      and extending child templates only append, prepend, or replace specific blocks of markup and logic.
    If you created a child template and tried to add content outside of a block,
      Pug would have no way of knowing where to put it in the final page.
      This includes unbuffered code, which can also contain markup.
      
  If you need to define variables for use in a child template, you can do so a few different ways:
    Add the variables to the Pug options object,
      or define them in unbuffered code in a parent template.
      The child template will inherit these variables.
    Define the variables in a block in the child template.
      Extending templates must have at least one block, or it would be empty — just define your variables there.

  For the same reason, Pug’s buffered comments cannot appear at the top level of an extending template:
    They produce HTML comments which would have nowhere to go in the resulting HTML.
  Unbuffered Pug comments, however, can still go anywhere.

!layout.pug ----------------------------
html
  head
    title My Site - #{title}
    block scripts
      script(src='/jquery.js')
  body
    block content
    block foot
      #footer
        p some footer content
        
!page-a.pug ----------------------------
extends layout.pug

block scripts
  script(src='/jquery.js')
  script(src='/pets.js')

block content
  h1= title
  
!sub-layout.pug ------------------------
extends layout.pug

block content
  .sidebar
    block sidebar
      p nothing
  .primary
    block primary
      p nothing
      
!page-b.pug ----------------------------
extends sub-layout.pug

block content
  .sidebar
    block sidebar
      p nothing
  .primary
    block primary
      p nothing
  
!page.pug ------------------------------
extends layout.pug

block append script
  script(src='/vendor/three.js')
  script(src='/game.js')

!page.pug ------------------------------
extends layout.pug

append script
  script(src='/vendor/three.js')
  script(src='/game.js')

#-------------------------------------------------------------------------------------------
#Filters
  Filters let you use other languages within a Pug template.
  Filters take a block of plain text as an input. 
  To pass options to the filter, add them inside parentheses after the filter name:
    :less(ieCompat=false)

  All JSTransformer modules can be used as Pug filters.
  Popular filters include :babel, :uglify-js, :scss, and :markdown-it.
  Check out the documentation for the JSTransformer for the options supported for the specific filter.
  
  If you couldn’t find an appropriate filter for your use case, you can also write your own custom filter.

  e.g. if you want to be able to use CoffeeScript and Markdown in your Pug template,
    you would first make sure that these features are installed:
      $ npm install --save jstransformer-coffee-script
      $ npm install --save jstransformer-markdown-it
    Now, you should be able to render the following template:
      :markdown-it(linkify langPrefix='highlight-')
        # Markdown

        Markdown document with http://links.com and

        ```js
        var codeBlocks;
        ```
      script
        :coffee-script
          console.log 'This is coffee script'
    // this will return
      <h1>Markdown</h1>
      <p>Markdown document with <a href="http://links.com">http://links.com</a> and</p>
      <pre><code class="highlight-js">var codeBlocks;
      </code></pre>
      <script>
        (function() {
          console.log('This is coffee script');

        }).call(this);
      </script>

##Warning:
    Filters are rendered at compile time, 
      which makes them fast
      but also means that they cannot support dynamic content or options.
    By default, JSTransformer-based filters are also not available during compilation in the browser,
      unless the JSTransformer modules are explicitly packed and made available
        through a CommonJS platform like Browserify and Webpack.
      In fact, Pug web site uses Browserify to make the filters available in the browser.
    Templates pre-compiled on the server do not have this limitation.

#Inline Syntax
  If the content of the filter is short, one can even use filters as if they are tags:
      p
        :markdown-it(inline) **BOLD TEXT**
      p.
        In the midst of a large amount of plain
        text, suddenly a wild #[:markdown-it(inline) *Markdown*]
        appeared.
    // will return
      <p><strong>BOLD TEXT</strong></p>
      <p>In the midst of a large amount of plain text, suddenly a wild <em>Markdown</em> appeared.
      </p>

#Filtered Includes
  You can also apply filters to external files, using the include syntax.

#Nested Filters
  Multiple filters can be applied to the same block of text by specifying them on the same line.
  The text is first passed to the last filter, whose result will be transformed by the second last, etc.
      script
        :cdata-js:babel(presets=['es2015'])
          const myFunc = () => "This is ES2015 in a CD${'ATA'}";
    // will return
      "<script>//<![CDATA[
      "use strict";

      var myFunc = function myFunc() {
        return "This is ES2015 in a CDATA";
      };
      //]]></script>"

#Custom Filters
  You can add your own filters to Pug as well using the filters option.
  See API Reference for filters
  
    options.filters = {
      'my-own-filter': function (text, options) {
        if (options.addStart) text = 'Start\n' + text;
        if (options.addEnd)   text = text + '\nEnd';
        return text;
      }
    };
  
    p
      :my-own-filter(addStart addEnd)
        Filter
        Body

#-------------------------------------------------------------------------------------------
#Doctype

#Doctype Shortcuts
  doctype html
    <!DOCTYPE html>
  doctype xml
    <?xml version="1.0" encoding="utf-8" ?>
  doctype transitional
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  doctype strict
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  doctype frameset
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
  doctype 1.1
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
  doctype basic
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
  doctype mobile
    <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">
  doctype plist
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

#Custom Doctypes
  doctype html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN">

#Doctype Option
    pug.render(source, {doctype: 'html'});
      // '<img src="foo.png">'
  If, for whatever reason, it is not possible to use the doctype keyword (e.g. rendering HTML fragments), 
    but you would still like to specify the doctype of the template, 
    you could do so via the doctype option.

#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
#API Reference

