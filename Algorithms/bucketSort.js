// BUCKET-SORT(array)
// it assumes that the input is generated by a random process that distributes elements uniformly and independently over the interval [0,1)
function bucketSort(array){
  // initialize 9 buckets to store the input from 0 to and not including 1
  var buckets = {}
  buckets['a0'] = []
  buckets['a1'] = []
  buckets['a2'] = []
  buckets['a3'] = []
  buckets['a4'] = []
  buckets['a5'] = []
  buckets['a6'] = []
  buckets['a7'] = []
  buckets['a8'] = []
  buckets['a9'] = []
  // for all elements in the array
  for(var i = 0; i < array.length; i++){
    // push it into the appropriate bucket: e.g. 0.23 -> 2nd bucket; 0,05 -> 0th bucket
    var el = array[i]
    var appropriateBucket = Math.floor(el*10)
    buckets["a"+appropriateBucket].push(el)
  }
  // sort each bucket using any kind of sorting algorithm (even the inefficient one is OK since the elements are uniformly distributed)
  for(var i=0; i<=9; i++){
    buckets['a'+i].sort()
  }
  // concatenate all the buckets from the first to the last in order
  var result = []
  for(var i=0; i<=9; i++){
    result = result.concat(buckets['a'+i])
  }
  // return the result
  return result
}

// RANDOM-INPUT(n) will return an array of n elements (from 0 to and not including 1) for BUCKET-SORT
function randomInput(n){
  var array = []
  // generate a random number between 0 and not including 1
  // push it to the result array
  for(var i=0; i<n; i++){
    array.push(Math.random())
  }
  // return the result array
  return array
}

bucketSort(randomInput(5))