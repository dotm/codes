see the directory where you installed Git 
which git 
Windows users should try $ where.exe git

#Creating repository online
	create repository in GitHub
	don't forget to check initialize with readme file
		unless you have made the repository first

#Cloning repository
	git clone https://github.com/your_name/your_file

#Commiting an update to repository
	# adds all files that are in your current directory and which you've
	# recently changed to the "staging area" (ie. they're "ready to commit")
	git add -A
	#git add '*.txt'

	# commits all the "staged" files into your local repository
	git commit -m "update README"

	# pushes your local repository up to your remote one on Github
	git push origin master
When you're building your project, you will probably end up doing several git add + git commit cycles 
before being ready to push it up to Github with git push

#-----------------------------------------------------------------------------------
#Initialize git
	git init
  Repository: a directory (folder) where Git has been initialized to start version controlling your files
  a repository have a hidden .git folder
  
#Checking current state of repository
	git status
  checking the state often is good
  checking the state before commit is mandatory
	
#Create new file

#Adding file to staging area
	git add fileName.extension
  Before Git can track changes made to a file, we first need to add it to the staging area

 #Add all
	git add -A . 
  the dot stands for the current directory, so everything in and beneath it is added
  the -A ensures even file deletions are included.
	git add -A := git add .; git add -u
  git add -A stages All
  git add . stages new and modified, without deleted
	this actually stages all in git version 2.x ??
  git add -u stages modified and deleted, without new
  
 #Remove file from staging area
	git reset <filename> 
	
 #Using wild-card to add multiple files of the same type
	git add '*.txt'			#the quote is important to add all txt recursively
	
#State of file
staged: files are ready to be committed.
unstaged: files with changes that have not been prepared to be committed.
untracked: files aren't tracked by Git yet. This usually indicates a newly created file.
deleted: file has been deleted and is waiting to be removed from Git.

#Staging Area:
A place where we can group files together before we "commit" them to Git.
	
#Committing repository
  commit: a snapshot of our repository
	git commit -m "short descriptive commit message"
  for the first commit use -m "initial commit"
  
  git commit -am "your message" := git add . ; git commit -m
	
#Viewing the changes log
	git log
	git log --summary
  if the log is displayed in multiple page, 
	press Enter to display next line
	press space to display next page
	press Q to exit <END>
	
#Add remote repository
	git remote add origin <url>
	git remote add origin <url>
  it's typical to name your main remote branch origin

#Pushing repository to remote server
	git push -u origin master
	shell response-> Branch master set up to track remote branch master from origin.
  the name of our remote is origin and the default local branch name is master
  the -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. 

	Cool Stuff:
	When you start to get the hang of git you can do some really cool things with hooks when you push.
	For example, you can upload directly to a webserver whenever you push to your master remote instead of having to upload your site with an ftp client. Check out Customizing Git - Git Hooks for more information.

#Pulling remotely
	git pull origin master
  check for changes on our GitHub repository and pull down any new changes by running

	git stash:
	Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than commiting, is to stash the changes.
	Use the command 'git stash' to stash your changes, and 'git stash apply' to re-apply your changes after your pull.

#See difference from last commit
	git diff HEAD
  In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer.
  HEAD: a pointer that holds your position within all your different commits. 
  By default HEAD points to your most recent commit, 
  so it can be used as a quick way to reference that commit without having to look up the SHA.

	diff --git a/octocat.txt b/octocat.txt
	index 7d8d808..e725ef6 100644
	--- a/octocat.txt
	+++ b/octocat.txt
	@@ -1 +1 @@
	-A Tale of Two Octocats
	+[mA Tale of Two Octocats and an Octodog

#
Another great use for diff is looking at changes within files that have already been staged. 
Remember, staged files are files we have told git that are ready to be committed.
	git diff --staged
Commit Etiquette:
You want to try to keep related changes together in separate commits. Using 'git diff' gives you a good overview of changes you have made and lets you add files or directories one at a time and commit them separately.
	
	diff --git a/octofamily/octodog.txt b/octofamily/octodog.txt
	new file mode 100644
	index 0000000..cfbc74a
	--- /dev/null
	+++ b/octofamily/octodog.txt
	@@ -0,0 +1 @@
	+[mwoof
	
#
Files can be changed back to how they were at the last commit by using the command: 
	git checkout -- <target>
	git checkout -- octocat.txt				#get rid of all the changes since the last commit for octocat.txt

The '--'
So you may be wondering, why do I have to use this '--' thing? git checkout seems to work fine without it. It's simply promising the command line that there are no more options after the '--'. This way if you happen to have a branch named octocat.txt, it will still revert the file, instead of switching to the branch of the same name.

#Creating branch
	git branch <branch_name>
	
#Switching branch
	git checkout <branch_name>
  
  to checkout and create a branch at the same time
	git checkout -b new_branch
  same thing as doing: git branch new_branch; git checkout new_branch

#Remove file
	git rm <fileName>
	git rm '*.txt'
  will not only remove the actual files from disk, but will also stage the removal of the files for us

  remove an entire folder
	git rm -r folder_of_cats
  this will recursively remove all folders and files from the given directory
  
	rm 'blue_octocat.txt'
	rm 'octocat.txt'
	rm 'octofamily/baby_octocat.txt'
	rm 'octofamily/momma_octocat.txt'
	rm 'red_octocat.txt'

	# On branch clean_up
	# Changes to be committed:
	#   (use "git reset HEAD <file>..." to unstage)
	#
	#	deleted:    blue_octocat.txt
	#	deleted:    octocat.txt
	#	deleted:    octofamily/baby_octocat.txt
	#	deleted:    octofamily/momma_octocat.txt
	#	deleted:    red_octocat.txt
	#
	# Untracked files:
	#   (use "git add <file>..." to include in what will be committed)
	#
	#	octofamily/

	The '-a' option
	If you happen to delete a file without using 'git rm' you'll find that you still have to 'git rm' the deleted files from the working tree. You can save this step by using the '-a' option on 'git commit', which auto removes deleted files with the commit.
	git commit -am "Delete stuff"

#Merging branches
you need to switch back to the master branch so you can copy (or merge) your changes from a branch back into the master branch
	git merge branch_name

#Delete branch
	git branch -d <branch_name>
  -d won't let you delete something that hasn't been merged
  to force delete either add the --force (-f) option or use -D which combines -d -f together into one command.

#Resolve conflict
Although we could just merge branch directly into master, 
	it's actually conventional to do the opposite -- merge master into branch 
	and, once all conflicts are resolved, merge knock-knock back into master (which won't have any conflicts anymore). 
This is best practice because you don't really want to be fixing a bunch of merge conflicts on your master branch 
	if you're working with other developers or with a big code base. 
Anything you merge into master should already be up-to-date and clean.

#-----------------------------------------------------------------------------------------------------
Welcome to Portable Git (version ghfw)


Run 'git help git' to display the help index.
Run 'git help <command>' to display help for specific commands.

BenQ@JF-PC /d/GitHub
$ pwd
/d/GitHub

BenQ@JF-PC /d/GitHub
$ mkdir test

BenQ@JF-PC /d/GitHub
$ ls
google_homepage/  test/

BenQ@JF-PC /d/GitHub
$ cd test

BenQ@JF-PC /d/GitHub/test
$ git status
fatal: Not a git repository (or any of the parent directories): .git

BenQ@JF-PC /d/GitHub/test
$ git init
Initialized empty Git repository in d:/GitHub/test/.git/

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master

Initial commit

nothing to commit (create/copy files and use "git add" to track)

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        README.txt

nothing added to commit but untracked files present (use "git add" to track)

BenQ@JF-PC /d/GitHub/test (master)
$ git add README.txt

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   README.txt


BenQ@JF-PC /d/GitHub/test (master)
$ git commit -m"initial commit"
[master (root-commit) 4337166] initial commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.txt

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master
nothing to commit, working directory clean

BenQ@JF-PC /d/GitHub/test (master)
$ git log
commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit

BenQ@JF-PC /d/GitHub/test (master)
$ git log --summary
commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit

 create mode 100644 README.txt

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   README.txt

no changes added to commit (use "git add" and/or "git commit -a")

BenQ@JF-PC /d/GitHub/test (master)
$ git commit -am"add hello"
[master 2b5756a] add hello
 1 file changed, 1 insertion(+)

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master
nothing to commit, working directory clean

BenQ@JF-PC /d/GitHub/test (master)
$ git commit -am"add knocker to joke"
[master 3c02440] add knocker to joke
 1 file changed, 3 insertions(+), 1 deletion(-)

BenQ@JF-PC /d/GitHub/test (master)
$ git commit -am"add respond to joke"
[master 49e2fa5] add respond to joke
 1 file changed, 2 insertions(+), 1 deletion(-)

BenQ@JF-PC /d/GitHub/test (master)
$ git log
commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 2b5756a7230ac2c306418d80bf510304fa1d90be
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:52:42 2015 +0700

    add hello

commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit

BenQ@JF-PC /d/GitHub/test (master)
$ git remote add origin https://github.com/dotm/trygit.git

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master
nothing to commit, working directory clean

BenQ@JF-PC /d/GitHub/test (master)
$ git remote -v
origin  https://github.com/dotm/trygit.git (fetch)
origin  https://github.com/dotm/trygit.git (push)

BenQ@JF-PC /d/GitHub/test (master)
$ git push -u origin master
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (12/12), 970 bytes | 0 bytes/s, done.
Total 12 (delta 0), reused 0 (delta 0)
To https://github.com/dotm/trygit.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.

BenQ@JF-PC /d/GitHub/test (master)
$ git pull origin master
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/dotm/trygit
 * branch            master     -> FETCH_HEAD
   49e2fa5..5d876d0  master     -> origin/master
Updating 49e2fa5..5d876d0
Fast-forward
 README.txt | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

BenQ@JF-PC /d/GitHub/test (master)
$ git log
commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:17:42 2015 +0700

    add respond from knocker

commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 2b5756a7230ac2c306418d80bf510304fa1d90be
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:52:42 2015 +0700

    add hello

commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit
	
BenQ@JF-PC /d/GitHub/test (master)
$ git branch knock-knock

BenQ@JF-PC /d/GitHub/test (master)
$ git checkout knock-knock
Switched to branch 'knock-knock'

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git status
On branch knock-knock
nothing to commit, working directory clean

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git commit -am "continue joke"
[knock-knock d2c98f5] continue joke
 1 file changed, 1 insertion(+)

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git log
commit d2c98f58eb27ccc4764a43a507a3f4f4f1698949
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:30:06 2015 +0700

    continue joke

commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:17:42 2015 +0700

    add respond from knocker

    add respond from knocker
    add respond from knocker

commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 2b5756a7230ac2c306418d80bf510304fa1d90be
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:52:42 2015 +0700

    add hello

commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>

BenQ@JF-PC /d/GitHub/test (master)
$ git log
commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:17:42 2015 +0700

    add respond from knocker
commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:17:42 2015 +0700

    add respond from knocker

commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 2b5756a7230ac2c306418d80bf510304fa1d90be

BenQ@JF-PC /d/GitHub/test (master)
$ git merge knock-knock
Updating 5d876d0..d2c98f5
Fast-forward
 README.txt | 1 +
 1 file changed, 1 insertion(+)

BenQ@JF-PC /d/GitHub/test (master)
$ git commit -am "finish joke"
[master 1345bdc] finish joke
 1 file changed, 2 insertions(+), 1 deletion(-)

BenQ@JF-PC /d/GitHub/test (master)
$ git log
commit 1345bdc4676f1a951f537897d8132963877b0023
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:39:58 2015 +0700

    finish joke

commit d2c98f58eb27ccc4764a43a507a3f4f4f1698949
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:30:06 2015 +0700

    continue joke

commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:17:42 2015 +0700

    add respond from knocker

commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 2b5756a7230ac2c306418d80bf510304fa1d90be
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:52:42 2015 +0700

    add hello

commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit

BenQ@JF-PC /d/GitHub/test (master)
$ git checkout knock-knock
Switched to branch 'knock-knock'

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git log
commit d2c98f58eb27ccc4764a43a507a3f4f4f1698949
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:30:06 2015 +0700

    continue joke

commit 5d876d0c086e8c8eda7117d8785de68174108514
Author: dotm <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 15:17:42 2015 +0700

    add respond from knocker

commit 49e2fa50341ed9771520ca04b8272d49e7f53424
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:57:27 2015 +0700

    add respond to joke

commit 3c02440925fd5c9d5e8f285df58d66f53bc22773
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:56:27 2015 +0700

    add knocker to joke

commit 2b5756a7230ac2c306418d80bf510304fa1d90be
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:52:42 2015 +0700

    add hello

commit 4337166435ea8b9fd17dd37b01da7493a7d3ad5c
Author: Yoshua Elmaryono <desde.el.mar96@gmail.com>
Date:   Thu Jun 25 14:48:15 2015 +0700

    initial commit

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git commit -am "finish joke even better"
[knock-knock 8dee5d4] finish joke even better
 1 file changed, 2 insertions(+), 1 deletion(-)

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git merge master
Auto-merging README.txt
CONFLICT (content): Merge conflict in README.txt
Automatic merge failed; fix conflicts and then commit the result.

BenQ@JF-PC /d/GitHub/test (knock-knock|MERGING)
$ git status
On branch knock-knock
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   README.txt

no changes added to commit (use "git add" and/or "git commit -a")

BenQ@JF-PC /d/GitHub/test (knock-knock|MERGING)
$ git merge master
error: 'merge' is not possible because you have unmerged files.
hint: Fix them up in the work tree,
hint: and then use 'git add/rm <file>' as
hint: appropriate to mark resolution and make a commit,
hint: or use 'git commit -a'.
fatal: Exiting because of an unresolved conflict.

BenQ@JF-PC /d/GitHub/test (knock-knock|MERGING)
$ git commit -am "fix merge, finish joke"
[knock-knock 598825a] fix merge, finish joke

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git merge master
Already up-to-date.

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git status
On branch knock-knock
nothing to commit, working directory clean

BenQ@JF-PC /d/GitHub/test (knock-knock)
$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)

BenQ@JF-PC /d/GitHub/test (master)
$ git merge knock-knock
Updating 1345bdc..598825a
Fast-forward
 README.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

BenQ@JF-PC /d/GitHub/test (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

nothing to commit, working directory clean

BenQ@JF-PC /d/GitHub/test (master)
$ git push
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (10/10), 914 bytes | 0 bytes/s, done.
Total 10 (delta 3), reused 0 (delta 0)
To https://github.com/dotm/trygit.git
   5d876d0..598825a  master -> master


BenQ@JF-PC /d/GitHub/test (master)
$ git branch -d knock-knock
Deleted branch knock-knock (was 598825a).

