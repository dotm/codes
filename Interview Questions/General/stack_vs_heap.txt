## Stack and Heap
    are stored in computer RAM

Call stack: a stack data structure that stores information about the active subroutines of a computer program
Stack frame: a frame of data that gets pushed onto the stack

All data stored on the stack must have a known, fixed size.
Data with an unknown size at compile time or a size that might change must be stored on the heap.

The process of allocating on the heap:
    when you put data on the heap, you request a certain amount of space.
    The operating system finds an empty spot in the heap that is big enough,
    marks it as being in use, and returns a pointer, which is the address of that location.
Pushing values onto the call stack is not considered allocating.
    Because the pointer is a known, fixed size, you can store the pointer on the stack,
    but when you want the actual data, you must follow the pointer.

Pushing stack frame to the stack is faster than allocating on the heap
    the operating system never has to search for a place to store new data;
    that location is always at the top of the stack.
Allocating space on the heap requires more work
    the operating system must first find a big enough space to hold the data
    and then perform bookkeeping to prepare for the next allocation

Accessing data in the heap is slower than accessing data on the stack
    because you have to follow a pointer to get there. 

When your code calls a function,
    the values passed into the function (including pointers to data on the heap)
    and the functionâ€™s local variables get pushed onto the stack.
    When the function is over, those values get popped off the stack.

## Stack vs. Heap

Each thread gets a stack, while there's typically only one heap for the application.

When a function is called, a block (stack frame) is reserved on the top of the stack
    for local variables, passed arguments, and return address.
    When that function returns, the block becomes unused
    and can be used the next time a function is called.
    The stack is always reserved in a stack (last in first out) order;
        the most recently reserved block is always the next block to be freed.
    This makes it really simple to keep track of the stack;
        freeing a block from the stack is nothing more than adjusting one pointer.

The heap is memory set aside for dynamic allocation.
    There's no enforced pattern to the allocation and deallocation of blocks from the heap;
    you can allocate a block at any time and free it at any time.
    This makes it much more complex to keep track
        of which parts of the heap are allocated or free at any given time

The stack is attached to a thread,
    so when the thread exits the stack is reclaimed.
The heap is typically allocated at application startup by the language runtime,
    and is reclaimed when the application (i.e. process) exits.

Variables created on the
    stack will go out of scope and are automatically deallocated.
    heap must be destroyed manually and never fall out of scope.
        The data is freed with delete, delete[], or free.

Use the stack if you know exactly
    how much data you need to allocate
    before compile time and it is not too big.
Use the heap if you don't know exactly
    how much data you will need at run time
    or if you need to allocate a lot of data.

The size of the stack is set when a thread is created.
    It has a maximum size already determined when your program starts.
The size of the heap is set on application startup,
    but can grow as space is needed.

Stack can overflow when too much of the stack is used 
    (mostly from infinite or too deep recursion, very large allocations).
Heap memory overload can cause memory leaks.

Data created on the stack can be used without pointers.
Data created on the heap will be pointed to by pointers and allocated with new or malloc respectively.

Variables on the stack are much faster to allocate in comparison to variables on the heap.
    One of the reason is because pushing and popping from the stack is faster.

Another performance hit for the heap is that
    the heap, being mostly a global resource,
    typically has to be multi-threading safe,
    i.e. each allocation and deallocation needs to be (typically)
    synchronized with "all" other heap accesses in the program.