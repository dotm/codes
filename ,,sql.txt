Database: A container (usually a file or set of files) to store organized data
Table: A structured list of data of a specific type
Schema: Information about database and table layout and properties
Column: A single field in a table
Row: A record in a table
Primary Key: A column (or set of columns) whose values uniquely identify every row in a table
Keyword: A reserved word that is part of the SQL language
Wildcards: Special characters used to match parts of a value
Search pattern: A search condition made up of literal text, wildcard characters, or any combination of the two
Calculated fields: a column created on-the-fly within a SQL SELECT statement
  by transforming data from one or multiple fields using operators or data manipulation functions.
Aggregate functions: Functions that operate on a set of rows to calculate and return a single value.
Query: Any SQL statement. However, the term is usually used to refer to SELECT statements.
Subqueries: queries that are embedded into other queries.

#--------------------------------------------------------------------------------
Statement must end with semicolon;

-- single line comment
/* multi line comment */

#Operators
  #Arithmetic operators: + - * /
  #Boolean/Logical operators: AND OR NOT
    Boolean values
  #Comparison operators: < <= > >= = != <> !< !> BETWEEN (IS NULL)
  #Bitwise

#SELECT Clause Ordering
  -------------------------------------------------------------------------------------------
  Clause     | Description                            | Required
  -----------|----------------------------------------|--------------------------------------
  SELECT     | Columns or expressions to be returned  | Yes
  FROM       | Table to retrieve data from            | Only if selecting data from a table
  WHERE      | Row-level filtering                    | No
  GROUP BY   | Group specification                    | Only if calculating aggregates by group
  HAVING     | Group-level filtering                  | No
  ORDER BY   | Output sort order                      | No

#--------------------------------------------------------------------------------
#Retrieving
  #Individual Columns
    SELECT column FROM Table;
  #Multiple Columns
    SELECT column, column FROM Table;
  #All Columns
    SELECT * FROM Table;
    
#Sorting
  #by Individual Columns
    SELECT column FROM Table ORDER BY column;       #Ascending
    SELECT column FROM Table ORDER BY column DESC;  #Descending
  #by Multiple Columns
    SELECT column FROM Table ORDER BY column DESC, column;
    
#Filtering
  #against a Single Value
    SELECT column FROM Table WHERE column < 10;
  #for Nonmatches
    SELECT column FROM Table WHERE column <> 'string value';
  #for a Range of Values
    SELECT column FROM Table WHERE column BETWEEN 5 AND 10;   #5 is included and 10 is included
  #for No Value
    SELECT column FROM Table WHERE column IS NULL;
#Compound Filtering
    condition example: column = value
  #the NOT Operator
    SELECT column FROM Table WHERE NOT condition;
  #the AND Operator
    SELECT column FROM Table WHERE condition AND condition;
  #the OR Operator
    SELECT column FROM Table WHERE condition OR condition;
  #Multiple Operator (use parentheses)
    SELECT column FROM Table WHERE (condition OR condition) AND condition;
  #the IN Operator (substitute for multiple OR operators)
    SELECT column FROM Table WHERE column IN(value, value);
  #the NOT IN Operator
    SELECT column FROM Table WHERE column NOT IN(value, value);
#Wildcard Filtering
    SELECT column FROM Table WHERE column LIKE 'search pattern here';
  #The zero or more character wildcard
      SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE '%Fish%';
    % or * represents zero, one, or more characters at the specified location in the search pattern.
  #The exactly one character wildcard
      SELECT prod_name FROM Products WHERE prod_name LIKE '__ inch teddy bear';
    _ or ? always matches one character no more and no less.
  #The Brackets ([]) Wildcard
      SELECT cust_contact FROM Customers WHERE cust_contact LIKE '[JM]%';
      SELECT cust_contact FROM Customers WHERE cust_contact LIKE '[^JM]%';
    brackets ([]) is used to specify a set of characters,
      any one of which must match a character
      in the specified position (the location of the wildcard).
    This wildcard can be negated by prefixing the characters with ^ (the carat character).
#Get unique elements only
  SELECT DISTINCT column FROM Table;
  SELECT aggregation(DISTINCT column) FROM Table;  
#Get top and top percentile elements
  SELECT TOP 3 * FROM Table ORDER BY column;
  SELECT TOP 50 PERCENT * FROM Table ORDER BY column;

#Calculated Fields
  SELECT function(column) FROM Table;
  SELECT column operator column FROM Table;

#Aliasing column
  SELECT column AS alias FROM Table;
  SELECT calculated field AS alias FROM Table;
#Aliasing Table
  SELECT Table_Alias.column FROM Table AS Table_Alias;
  
#--------------------------------------------------------------------------------
#Data Manipulation Functions

#Text Manipulation Functions
    (see ,,lang.txt for updated version)
  #SOUNDEX()
      SELECT cust_contact FROM Customers
      WHERE SOUNDEX(cust_contact) = SOUNDEX('Michael Green');   -- this will also return similarly sounded names like 'Michelle Green'
    takes into account similar sounding characters and syllables,
    enabling strings to be compared by how they sound rather than how they have been typed.
    
#Date and Time Manipulation Functions
  (see ,,lang.txt for updated version)

#Numeric Manipulation Functions
  (see arithmetic operators above)
  (see ,,lang.txt on basic mathematics operators for updated version)
  
#System Functions

#--------------------------------------------------------------------------------
#Aggregate Functions
    SELECT aggregation(column) FROM Table;
    SELECT aggregation(DISTINCT column) FROM Table;
  #AVG()
    SELECT AVG(column) AS average FROM Table;
  #COUNT()
    SELECT COUNT(*) AS total_row FROM Table;    -- this will count NULL values too
    SELECT COUNT(column) AS total FROM Table;   -- this will ignore NULL values
  #MAX()
    SELECT MAX(column) AS maximum FROM Table;
  #MIN()
    SELECT MIN(column) AS minimum FROM Table;
  #SUM()
    SELECT SUM(column) AS summation FROM Table;
    SELECT SUM(calculated field) AS summation FROM Table;
      SELECT SUM(column * column) AS summation FROM Table;

#Grouping Data
  SELECT aggregation(*) AS total_columns FROM Table GROUP BY column;
    SELECT vend_id, COUNT(*) AS num_prods FROM Products GROUP BY vend_id;
  SELECT column FROM Table GROUP BY column;
    -- this is equal to: SELECT DISTINCT column FROM Table
#Filtering Groups
  SELECT aggregation(*) AS total_columns FROM Table GROUP BY column HAVING condition;
	  SELECT vend_id, COUNT(*) AS num_prods FROM Products WHERE prod_price >= 4 GROUP BY vend_id HAVING COUNT(*) >= 2;

#--------------------------------------------------------------------------------
#Subquery
  #Filtering by Subquery
    SELECT cust_name FROM Customers WHERE cust_id IN(
      SELECT cust_id FROM Orders WHERE order_num '0001');
  #Using Subqueries As Calculated Fields
    SELECT
      cust_name,
      cust_state,
      (SELECT COUNT(*) FROM Orders WHERE Orders.cust_id = Customers.cust_id) AS orders
    FROM Customers;

#--------------------------------------------------------------------------------
#Join

#Inner Joins
  SELECT column, Table1.column, Table2.column
	FROM Table1 INNER JOIN Table2
	ON Table1.column = Table2.column;

#Self Joins
  SELECT Table1.column, Table2.column
  FROM Table AS Table1, Table AS Table2   --same table
  WHERE Table1.column = Table2.column
  AND Table2.column = value;

#Outer Joins
  #Left Outer Join
    SELECT column, Table1.column, Table2.column
    FROM Table1 LEFT OUTER JOIN Table2
    ON Table1.column = Table2.column;
  #Right Outer Join
    SELECT column, Table1.column, Table2.column
    FROM Table1 RIGHT OUTER JOIN Table2
    ON Table1.column = Table2.column;
  #Full Outer Join
    SELECT column, Table1.column, Table2.column
    FROM Table1 FULL OUTER JOIN Table2
    ON Table1.column = Table2.column;

#Cross Joins
  SELECT Table1.column, Table2.column FROM Table1, Table2;

#Joining Multiple Tables
	SELECT prod_name, vend_name, prod_price, quantity
	FROM OrderItems, Products, Vendors
	WHERE Products.vend_id = Vendors.vend_id          --inner join
	AND OrderItems.prod_id = Products.prod_id         --inner join
	AND order_num = 20007;
    
#Using Joins with Aggregate Functions
  SELECT Customers.cust_id, COUNT(Orders.order_num) AS num_ord
	FROM Customers LEFT OUTER JOIN Orders
	ON Customers.cust_id = Orders.cust_id
	GROUP BY Customers.cust_id;

#--------------------------------------------------------------------------------
#Combined Query
  SELECT column FROM Table WHERE condition
  UNION
  SELECT column FROM Table WHERE condition;
#Combined Query (include duplicate row in result)
  SELECT column FROM Table WHERE condition
  UNION ALL
  SELECT column FROM Table WHERE condition;
#Sorting Combined Query Results
  SELECT column FROM Table WHERE condition
  UNION
  SELECT column FROM Table WHERE condition
  ORDER BY column DESC, column;             --put the ORDER BY at the last query