# ACID

ACID (atomicity, consistency, isolation, durability)
is a set of properties of database transactions
intended to guarantee validity even in the event of errors, power failures, etc.

TL;DR
Atomicity:
    if one operation in the transaction fails,
    all operations in the transaction fails
Consistency:
    each transaction can only bring the database
    from one valid state to another
Isolation:
    all concurrent transactions don't affect
    the execution of other currently running transaction
Durability:
    once a transaction is committed,
    it will remain even if the system fails

In the context of databases, a sequence of database operations
that satisfies the ACID properties
(can be perceived as a single logical operation on the data)
is called a transaction.

# Atomicity

Transactions are often composed of multiple operations/statements.

Atomicity guarantees that each transaction is treated as a single "unit",
which either succeeds completely, or fails completely.

If any of the statements constituting a transaction fails to complete,
the entire transaction fails and the database is left unchanged.

# Consistency

Consistency ensures that a transaction
can only bring the database
from one valid state to another,
maintaining database invariants.

Any data written to the database must be valid
according to all defined rules,
including constraints, cascades, triggers, and any combination thereof.

This prevents database corruption by an illegal transaction,
but does not guarantee that a transaction is correct.

Referential integrity guarantees the primary key â€“ foreign key relationship.

Referential integrity is a property of data
stating that all its references are valid.
In the context of relational databases,
it requires that if a value of one attribute (column)
of a relation (table) references a value of another attribute
(either in the same or a different relation),
then the referenced value must exist.

# Isolation

Transactions are often executed concurrently
(e.g., multiple transactions reading and writing to a table at the same time).

Isolation ensures that concurrent execution of transactions
leaves the database in the same state that would have been obtained
if the transactions were executed sequentially.

Isolation is the main goal of concurrency control.
Depending on the method used, the effects of an incomplete transaction
might not even be visible to other transactions.

# Durability

Durability guarantees that once a transaction has been committed,
it will remain committed even in the case of a system failure (e.g., power outage or crash).

This usually means that completed transactions (or their effects) are recorded in non-volatile memory.