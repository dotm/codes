// single line comment
/* multi line comment */

#Constant declaration: let constant_name = value
  #with type annotation:
    let constant_name: Type
    let constant_name, constant_name: Type
    let constant_name: Type = value
#Variable declaration: var variable_name = value
  #with type annotation:
    var variable_name: Type
    var variable_name, variable_name: Type
    var variable_name: Type = value

#--------------------------------------------------------------------------------
#Arithmetic operators: + - * / %
#Comparison operators: < <= > >= == !=
#Logical operators: && || !
#Identity operators: === !==
  test equality of references between two objects

#Overflow Operators: &+ &- &*
#Bitwise operators: ~ & | ^ << >>

#--------------------------------------------------------------------------------
#Data types
    all of the basic types in Swift are value types, and are implemented as structures behind the scenes
  #Boolean: Bool
    true false
  #Integers: Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64
      in 32-bit platform: Int = Int32
      in 64-bit platform: Int = Int64
    #Get bounds of integer: Int64.min Int64.max
  #Float: Float (32 bit), Double (64 bit)
    var x = 3.14  // x is Double
  #Character
  #String
  #UnicodeScalarView := [unicodeScalars]
  #nil
  #Nonspecific types: Any AnyObject
#Collection types
  #Array: Array<Type> [Type]
  #Set: Set<Type>
  #Dictionary: Dictionary<Key, Value> [Key: Value]
#Reference type: object closure
#Type conversion:
  TargetType(value)
  Int8(2.9)       // this will return 2 of type Int8
#Type alias:
  typealias Alias = Type
  typealias CreditCard = UInt64
#Type checking:
  var isType: Bool = value is Type
#Downcasting
  #with optional as operator:
    //object is Superclass
    var x: Subclass? = object as? Subclass
  #force unwrapping as operator:
    //object is Superclass
    var x: Subclass = object as! Subclass
#As operator
  #for disambiguation:
    print(optional_value as Any)
    var x = 1 as Int?             //the same as -> var x: Int? = 1

#--------------------------------------------------------------------------------
#Range Operators
  #Closed Range Operator: a...b
  #Half-Open Range Operator: a..<b
  #One-Sided Ranges:
    a...
    ...b
    ..<b
  #Closed ranged stride method:
    stride(from: 0, through: 4, by: 2)  // 0, 2, 4
  #Half open stride method:
    stride(from: 0, to: 4, by: 2)       // 0, 2

#--------------------------------------------------------------------------------
Conditional

#If statement
  if condition {
    statements
  } else if condition {
    statements
  } else {
    statements
  }

#Ternary operator statement
  condition ? expression : expression

#Guard statement
    disallow fallthrough by using
      return statement
      break or continue statement
      throw statement
      a function or method that doesnâ€™t return, such as fatalError(_:file:line:)
  guard let constant_name = value else { statements }

#Switch statement
    the cases in switch statement
      needs to be collectively exhaustive
      but doesn't need to be mutually exclusive (the first case encountered will be executed)
  #basic
    switch value {
      case condition:
        // because fallthrough in Swift switch statements must be explicit
        // no explicit 'break' statement is required (unless the case statement doesn't have a body)
      case condition, condition:
        // instead of using fallthrough, you can use a compound case statement that handle multiple cases
      default:
        // default statement doesn't need to be provided
        // if all the case statements above is collectively exhaustive
    }
#Control Transfer Statements for Switch Statements
  #break out of switch statement: break
  #explicit fallthrough to next case statement (regardless of the condition): fallthrough

#--------------------------------------------------------------------------------
Loop

#For in loop using range
  for i in 1..<10 { print(i) }    // will not include 10
  for i in 1...10 { print(i) }    // will include 10
  for _ in 1...10 { statements }  // the index _ will be ignored
#While loop
  while condition { statements }
#Do while loop
  repeat { statements } while condition

#Iterate over array
  for value in array { statements }
  for (index, value) in array.enumerated() { statements }
#Iterate o)er set
  for value in set { statements }
#Iterate over dictionary
  for (key, value) in dictionary { statements }

#Labeled Statements
  label_name: while condition { statements }

#Control Transfer Statements for Loop
  #continue to next iteration: continue
  #continue with label: continue label_name
  #break from loop: break
  #break with label: break label_name

#--------------------------------------------------------------------------------
#Function
    first-class object
    can be overloaded
  #definition
    #basic: func function_name(){ statements }
    #with return value: func function_name() -> Return_Type { return value }
      Return_Type of function with no return value
        is Void which can be represented by an empty tuple ()
    #with multiple return value
      #using tuple: func function_name() -> (Type, Type, ...) { return (value, value, ...) }
      #using named tuple: func function_name() -> (name: Type, name: Type, ...) { return (value, value, ...) }
    #with optional return value
      func function_name() -> Return_Type? { return value }
      func function_name() -> (Type, Type, ...)? { return (value, value, ...) }
    #with parameter: func function_name(parameter_name: Type, parameter_name: Type){ statements }
    #with argument label:
        the parameter_name is used inside the function body
        the argument_label is used when calling the function
        if you use _ as argument_label, you can omit argument_label when calling the function
      func function_name(_ parameter_name: Type, argument_label parameter_name: Type){ statements }
    #with default parameter: func function_name(parameter_name: Type, parameter_name: Type = value){ statements }
  #call
    #basic: function_name()
    #with parameter: function_name(parameter_name: value, parameter_name: value)
    #with argument_label: function_name(value, argument_label: value)
    #ignoring return value: let _ = function_name()
  #variadic function
    func function_name(xs: Int...) -> () { print(xs) }; function_name(xs: 1,2,3);
    func function_name(_ xs: Int...) -> () { print(xs) }; function_name(1,2,3);
  #higher-order function:
    func function_name(callback: ((Type, Type) -> Type)) -> ((Type) -> Type){ statements }
  #nested function:
    func a(){ func b(){statements} }
  #in-out parameters
      is a way for a function to have an effect (i.e. changing a variable value) outside of the scope of its body
    func function_name(parameter_name: inout Type, parameter_name: inout Type){ statements }
    function_name(&parameter_name, &parameter_name)

#Closure
    is self-contained blocks of functionality that can be passed around
    is a reference type
    can capture and store references to (can close over)
      any constants and variables from the context in which they are defined
  #Closure Expressions
      names.sorted(by: { (s1: String, s2: String) -> Bool in return s1 > s2 } )
      names.sorted(by: { s1, s2 in return s1 > s2 } )
      names.sorted(by: { s1, s2 in s1 > s2 } )
      names.sorted(by: { $0 > $1 } )
      names.sorted(by: >)
  #Trailing Closures
      #without trailing closure: higher_order_function(parameter_name: value, callback: closure_expression)
      #with trailing closure: higher_order_function(parameter_name: value){ closure_expression }
      #example: higher_order_function(x: 2){x in x * 10}
    #pass closure as only argument to higher_order_function:
      #without trailing closure: higher_order_function(callback: closure_expression)
      #with trailing closure: higher_order_function{ closure_expression }
      #example: higher_order_function{x in x * 10}
  #Escaping Closures
      is closure passed as an argument to the function, but is called after the function returns.
      need to be marked with @escaping
      refer to 'self' explicitly within the escaping closure when referring to object property (or a compile error will happen)
    #example
      var middlewares: [() -> Void] = []
      func add_middleware(callback: @escaping () -> Void){
        middlewares.append(callback)
      }
      add_middleware { print(1) }

#--------------------------------------------------------------------------------
#Tuples
  #create:
    let http404Error = (404, "Not Found")
  #unpacking:
    let (statusCode, statusMessage) = http404Error
    let (statusCode, _) = http404Error
  #access by index: http404Error.0

#Named tuples
  #create:
    let http200Status = (statusCode: 200, description: "OK")
  #access by name: http404Error.statusCode

#--------------------------------------------------------------------------------
#Optionals
    optional variable and constant can contain nil
    force unwrapping a nil value will raise a runtime error
  #declaration:
    var optional_variable_name: Type?      // initialized to nil
    let optional_constant_name: Int? = 1
  #forced unwrapping: optional_variable_name!
  #optional binding:
    #if statement
      if let constant_name = optional, var variable_name = optional, condition {
        statements //executed only if all of the optional is not nil
      } else if let constant_name = function_name() {
        statements //executed only if function_name return non nil value
      } else { statements }
    #while statement
      while let constant_name = optional, var variable_name = optional, condition {
        statements
      }

#Implicitly Unwrapped Optionals
  #declaration: var optional_variable_name: Type! = value
  #unwrapping: optional_variable_name

#Nil-Coalescing Operator: optional_value ?? default_value

#Optional Chaining
    object.optional_property?.property
    object.optional_property?.optional_property?[0]
    if object.optional_property?.property != nil { statements }
    if let variable_name = object.optional_property?.property { variable_name != nil }
    object.optional_property?.method()
    object.optional_property?[index]
    function_name()?.property
    optional_function?()

#--------------------------------------------------------------------------------
#Array
    zero index, homogeneous, variable-length
    mutable with var declaration, immutable with let (constant) declaration
    no nil value allowed (removal will be followed by moving elements from the right to fill the value of removed element)
  #create:
    var array = [value, value]    // array literal
    var array = Array<String>()   // creating empty array
    var array = [String]()        // creating empty array using shorthand form
    var array = Array(repeating: 0.0, count: 3)   // [0.0, 0.0, 0.0]
  #length: array.count
  #sort
    #ascending: array.sorted()
    #descending: array.sorted(by:>)
  #access element by index: array[index]
  #change element value
    #at index: array[index] = value
    #at range: array[range] = [value, value, ...]
  #insert element at index: array.insert(value, at: index)
  #remove element at index: array.remove(at: index)
  #add and get value (get := access, return, then remove that value)
    #pop (get last): array.removeLast()
    #push (add to last): array.append(value)
    #shift (get first): array.remove(at: 0)
    #unshift (add to first): array.insert(value, at:0)
  #concatenate: array + array
  #emptying: array = []
  #check if array
    #isEmpty: array.isEmpty

#--------------------------------------------------------------------------------
#String
  is an array of character

#String output: print(string)
#Multi-line string:
  var string = """
    multi-line string
    """

#String methods
  #interpolation: "string \(expression)."
  #concatenate: string + string
  #get string length: string.count
  #check if string
    #isEmpty: string.isEmpty
    #starts with substring: string.hasPrefix(substring)
    #ends with substring: string.hasSuffix(substring)

#Accessing string
  string[index]
#Get all indices: string.indices
  for index in greeting.indices { print(greeting[index]) }

#Insert single character to index: string.insert("a", at: index)
#Insert string to index: string.insert(contentsOf: string, at: index)

#Get substring using range:
    startIndex (range operator) endIndex
    let range = string.index(string.endIndex, offsetBy: -6) ..< string.endIndex
    let substring = string[range]           // substring is of type Substring and must be turned to String by casting
  // the String() method return optional and must be followed by nil coalescing or force unwrapping
    let newString = String(substring) ?? ""
    let newString = String(substring)!

#Remove single character at index: string.remove(at: index)
#Remove substring using range: string.removeSubrange(range)

#--------------------------------------------------------------------------------
#Dictionary
    homogeneous (keys must be of the same type, value must be of the same type)
    mutable with var declaration, immutable with let (constant) declaration
  #create:
    var dict = [key: value, key: value,]  // dictionary literal
    var dict = [String: Float]()          // creating empty dictionary
  #length: dict.count
  #access value by key: dict[key]         // this will optionally return a value
  #add key-value pair: dict[key] = value
  #edit key-value pair:
    dict[key] = value                                     // value can be nil
    dict.updateValue = (value, forKey: key)               // this will optionally return the old value
  #delete key-value pair: dict.removeValue(forKey: key)   // this will optionally return the deleted value
  #get list of
    #keys: dict.keys
    #values: dict.values
  #emptying: dict = [:]
  #check if dictionary
    #isEmpty: dict.isEmpty

#--------------------------------------------------------------------------------
#Enumeration
    is pass-by-value
    Each enumeration definition in Swift defines a new type
    you can use self keyword to refer to current enumeration value
      e.g. if self == male { statements }
  #definition:
    enum Gender {
      case male
      case female
    }
    enum Gender {
      case male, female
    }
  #usage
    var gender = Gender.male  // first initialization
    gender = .female          // changing the value after initialization
  #pattern matching with switch statement
    switch gender {
      case .male: print("male")
      case .female: print("female")
      // you must provide a default case if the cases above is not collectively exhaustive
      default: print("Hmmm")
    }
  #make enumeration iterable
    enum Gender: CaseIterable { case male, female }
    for gender in Gender.allCases { statements }

#Raw Values
    enumeration cases can come prepopulated with default values (raw values) which are all of the same type.
  #create:
    enum ASCIIControlCharacter: Character {
      case tab = "\t"
      case lineFeed = "\n"
      case carriageReturn = "\r"
    }
    enum Gender: String { case male, female }
  #access raw value of enumeration case: Gender.male.rawValue
  #initialize enum from raw value:
    var gender: Gender? = Gender(rawValue: "male")
    var gender: Gender? = Gender(rawValue: "helicopter") // will return nil

#Implicitly Assigned Raw Values
  #with string
    when strings are used for raw values,
      the implicit value for each case is the text of that caseâ€™s name.
  #example:
    enum Gender: String { case male, female }
  #with integer
    when integers are used for raw values,
      the implicit value for each case is one more than the previous case.
      If the first case doesnâ€™t have a value set, its value is 0.
  #example:
    enum Planet: Int {
      case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
    }

#--------------------------------------------------------------------------------
#Structure
  is pass-by-value
    and so, you can't change structure properties if it is declared as constant
  you can use self keyword to refer to structure instance
    but Swift implicitly add self. to variable_name inside struct braces{} if variable_name is not in current scope
#Creating Structure
  struct StructureName {
    /* Initializer */

    //Initializer have more or less the same syntax and features as function
    //  except that it's always named init, it doesn't return anything and it is called with StructureName() instead of function_name
    //default initializer is added automatically by Swift
    //  except if you have defined one or more custom initializer,
    //  so you can use memberwise initializer

    //custom initializer
    init(){}                    //you can do nothing if all properties are already set to a default value
    init(parameter_name: Type, parameter_name: Type){ statements }
    //just like function, init can use argument_label, throws error, etc.

    //initializer can be overloaded and can delegate to another initializer
    init(parameters){
      self.init(arguments)   //delegate to another initializer with different signature
    }


    /* Property */

    //stored properties
    var property = value
    let constant_property = value
    let uninitialized_constant: Type
    //you must use optional as property type if the property value cannot be set directly or during initialization
    var optional: Type?

    //type property is owned by the type (e.g. StructureName) and not by the instance
    static var stored_type_property = value

    /* Method */

    //instance method
    func instance_method(){ statements }

    //mutate properties from instance method
    mutating func instance_method(){ property = value }
    //assign new instance from instance method
    mutating func instance_method(){ self = StructureName(arguments) } //you can use memberwise initializers here

    //type method is owned by the type (e.g. StructureName) and not by the instance
    static func type_method(){
      //self in type_method refers to the type itself, rather than an instance of that type
      print(type_property)
    }
  }
#Instantiating structure: var structure = StructureName(arguments)
#Instantiating using memberwise initializers: StructureName(property: value, uninitialized_constant: value)
  All structures have an automatically generated memberwise initializer,
    which you can use to initialize the member properties of new structure instances.
  you can't initialize a constant property that is already initialized (e.g. constant_property)

#Get structure instance property: structure.property
#Set structure instance property: structure.property = value
#Get Structure type property: StructureName.type_property
#Set Structure type property: StructureName.type_property = value
#Call instance method: structure.instance_method()
#Call type method: StructureName.type_method()

#--------------------------------------------------------------------------------
#Class
  object is pass-by-reference
    and so, you can change object properties even if it is declared as constant
  you can use self keyword to refer to object instance
    but Swift implicitly add self. to variable_name inside class braces{} if variable_name is not in current scope
#Creating class
  class ClassName {
    /* Initializer */

    //custom initializer
    init(){}                    //you can do nothing if all properties are already set to a default value
    init(parameter_name: Type, parameter_name: Type){ statements }
    //just like function, init can use argument_label, throws error, etc.

    //you can override the initializer of a superclass with the same signature
    override init(){}

    //initializer can be overloaded and can delegate to another initializer
    //a class must have at least on designated initializer
    //designated initializer must call a designated initializer of its superclass (if it has one)
    init(parameters){
      super.init(arguments)   //delegate to another initializer with different signature
    }
    //convenience initializer must call a designated initializer of its own class (directly or indirectly)
    convenience init(parameters) {
      self.init(arguments)
    }

    //failable initializer is initializer that can fail
    init?(){
      if initialization_failed { return nil } //return nil will triggers an initialization failure
      statements
    }

    //required initializers: every subclass of the class must implement this initializer
    required init(){}


    /* Deinitializer */
    //max one deinit per class
    //superclass deinit will always be called when subclass is deallocated even if subclass doesn't have any deinit method
    deinit {
      statements
      //you can perform additional cleanup of your own resources here (e.g. closing file, network connection, etc.)
      //no need to call super.deinit() since it's called automatically
    }


    /* Property */

    //stored properties
    var property = value
    let constant_property = value
    //you must use optional as property type if the property value cannot be set directly or during initialization
    var optional: Type?

    //type property is owned by the type (e.g. ClassName) and not by the instance
    static var stored_type_property = value

    //using class instead of static keyword makes the property overridable by subclass
    class var overrideable_type_property = value

    /* Method */

    //instance method
    func instance_method(){ statements }
    //instance method on Class are allowed to mutate properties since object is reference type

    //type method is owned by the type (e.g. ClassName) and not by the instance
    static func type_method(){
      //self in type_method refers to the type itself, rather than an instance of that type
      //since self. is added implicitly by Swift,
      //  you can access type_property and type_method without using explicit self.type_property or self.type_method
      print(type_property)
    }
    //using class instead of static keyword makes the method overridable by subclass
    class type_method(){ statements }
  }
#Instantiating class
  var object = ClassName(arguments)
#Get object instance property: object.property
#Set object instance property: object.property = value
#Get class type property: ClassName.type_property
#Set class type property: ClassName.type_property = value
#Call instance method: object.instance_method()
#Call type method: ClassName.type_method()

#Final class (can't be subclassed)
  final class ClassName { definitions }
#Inheritance
  class Subclass: Superclass { definitions }
#Overriding
  override property = value
  override func function_name(){}
#Access superclass property, method, and subscript
  super.property
  super.function_name()
#Preventing override
  final var property = value
  final let property = value
  final func function_name(){}
  final class func function_name(){}

#--------------------------------------------------------------------------------
#Protocol
  since protocols are type, you can use the 'is' and 'as' operator with protocol

#Adopting protocol
  enum Enumeration: ProtocolName, ProtocolName { definitions }
  struct StructureName: ProtocolName, ProtocolName { definitions }
  class Subclass: Superclass, ProtocolName, ProtocolName { definitions }
#Creating protocol
  protocol ProtocolName {
    var must_be_settable: Type { get set }          //property requirements must always be prefixed with var
    var does_not_need_to_be_settable: Type { get }  //but can be settable

    func method()                   //method requirements with Void as return type
    func method() -> Return_Type
    mutating func method()          //mutating method requirements

    //type property and type method requirements must be prefixed with static (but can be implemented with class keyword in class type)
    static var type_property: Type { get set }
    static func method() -> Return_Type

    init(parameter_name: Type, parameter_name: Type)    //initializer requirements
    init?(parameter_name: Type, parameter_name: Type)   //failable initializer requirements
    //to conform to initializer requirements, you need to use 'required' keyword in the type implementation to make it required initializer
    //  class Superclass: ProtocolName { required init(parameters){statements} }
    //  class Subclass: ProtocolName { required override init(parameters){statements} }
  }

#Protocol Inheritance
protocol InheritingProtocol: ProtocolName, ProtocolName { definitions }

#Class-Only Protocols:
    protocol ProtocolName: AnyObject { definitions }
  You can limit protocol adoption to class types (and not structures or enumerations)
    by adding the AnyObject protocol to a protocolâ€™s inheritance list.

#Delegation with protocol
  Delegation is a design pattern
    that enables a class or structure to hand off (or delegate)
    some of its responsibilities to an instance of another type
  To prevent strong reference cycles, delegates are declared as weak references.
    To be able to declare delegate as weak reference, ProtocolNameDelegate must be a class only protocol (inherits from AnyObject)
#example
  protocol ProtocolName { definitions }
  protocol ProtocolNameDelegate: AnyObject { definitions }
  struct StructureName {
    weak var delegate: ProtocolNameDelegate?
  }

#--------------------------------------------------------------------------------
#Error Handling

#Throwing Function
  func throwing_function (parameter_name: Type) throws -> Return_Type {
    guard condition else { throw error }
    defer {
      //do cleanup here
    }
    
    statements
  }
#Calling throwing function
  try throwing_function(arguments)  // if this raise error, it will propagate the error

#Converting Errors to Optional Values
  let constant_name: Return_Type? = try? throwing_function()
#Disabling Error Propagation
    use this if you know a throwing function wonâ€™t throw an error at runtime
  let constant: Return_Type = try! throwing_function()
#Handling error using do-catch statement
  do {
    try expression
    statements
  } catch MyError.error {
    statements
  } catch MyError.error(let argument, let argument) {   // error with arguments
    print(argument)
  } catch MyError.error(let argument) where condition { //example condition: argument == value
    statements
  } catch is MyError {
    print("error related to MyError")
  } catch {
    //if a catch clause doesnâ€™t have a pattern, the clause matches any error
    //  and binds the error to a local constant named error.
    print(error)
  }

#User-defined error and throwing error
  enum MyError: Error {
    case error(String)
  }
  throw MyError.error("error message")

  extension String: Error {}
  throw "error message"
