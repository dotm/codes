// single line comment
/* multi line comment */
  can also be used as inline comment: var variableName /* declare */ = 'value'

#function-level scope:
  var variableName='value'
#block-level scope:
  let variableName='value'
#block-level scope constant:
  const variableName='value'
#global scope (e.g. browser's "window"):
  variableName='value'

#Hoisting
  all variable and function declarations are hoisted (lifted and declared) to the top of its context (the containing scope)
  only declarations are hoisted (initialization/assignments are not hoisted)
  function declaration takes precedence over variable declarations but not over variable assignment
  var myName;  ​    function myName(){};  console.log(typeof myName);  -> function
  var myName='la';  ​function myName(){};  console.log(typeof myName);  -> string

#User string input
  confirm("Yes or no?");
  prompt("Input your data:");
#String output
  console.log(2*5);
  alert("Lala");

#Data types: number(NaN, infinity), string, boolean, array, object, function, null, undefined, symbol, etc.
  #Falsy value: false, undefined, null, NaN, 0, ''
  #Primitives: strings, booleans, numbers, undefined, null
  #Complex: object, array, function
#Reflection (find data types of a variable)
  typeof variableName;    typeof(variableName);

#Operators: + - * / %
#Comparataors: > < <= >= === !==

#Manipulating strings
  strings
    .length()
    .substring(0, 1)
    .toUpperCase
    .toLowerCase

#Regex literal
  / regex | regex | ... /gim
#Regex object properties
  global, ignoreCase, lastIndex, multiline, source

#-----------------------------------------------------------------------------------------------------------------
#Function ()
  functions are first-class objects
  In addition to the declared parameters,
    every function receives 2 additional parameters: this and arguments
  #Function declaration:                      function functionName(parameters) { statements; }
  #Function expression
    anonymous function expression:            var identifier = function(parameters) { statements; }
    named function expression:                var identifier = function functionName(parameters) { statements; }
    immediately invoked function expression: (function greet() { alert("hello!"); })();
      another valid way to use IIFE:         (function greet() { alert("hello!"); }());
#Function hoisting
  function declarations and function variables are moved to the top of their scope by JavaScript interpreter
  do function expressions get hoisted too?
  the variable declarations get hoisted but their assignment expressions don’t:  var identifier = undefined
#Function cascade
    get(object).method().method().method()
  Some methods do not have a return value.
    e.g., methods that set or change the state of an object
  If we have those methods return 'this' instead of undefined, we can enable cascades.

#Arrow function
  see ES6 file

#Inner functions
  inner functions (nested functions): functions defined inside of another function (the outer function)
  each time the outer function is called, an instance of the inner function is created
  inner functions have implicit access to the outer function’s scope
    can use outer function's variables, arguments, etc.
#Closure
  a closure is created when an inner function is made accessible from outside of the function that created it
    typically occurs when an outer function returns a (reference to an) inner function
    the inner function then maintains a reference to the environment in which it was created
      it remembers all of the variables (and their values) that were in scope at the time
  in general, you can say that:
    first-class function == object with only one method
    closure == object with only one method and some states
    object == bundle of closures
#Callback function: a function passed to another function as an argument
#Manipulate function context
    functionName.bind(newContext)
    functionName.call(newContext, argument1, argument2)
    functionName.apply(newContext,[argument1, argument2, ...])
  use the methods below to manipulate the this variable of a function
  set new context to null if you don't want to change the context
  set new context to where the function is defined using 'this' as newContext
#Currying
  var add = function(a) {
    return function(b) {return a + b;};
  };
  add2 = add(2)
  add2(3) -> 5

#Time Out methods
  window.setTimeout()
    Calls a function or executes a code snippet after a specified delay.
      var timeoutID = window.setTimeout(func, [delay, param1, param2, ...]);
      var timeoutID = window.setTimeout(code string, [delay]);
      function delayedAlert() {
        timeoutID = window.setTimeout(slowAlert, 2000);
      }
    setTimeout does not return a function that can be executed
    it returns a handler, an number ID that lets you reference the timeout
      if you assign it to a variable, you can clear it with clearTimeout
  window.clearTimeout(timeoutID);

#-----------------------------------------------------------------------------------------------------------------
#Conditionals
  if (condition) { statements } else if { statements } else { statements }
#Ternary operator
  var propertyName = ( dim === 'width' ) ? 'clientWidth' : 'clientHeight';

#Switch
  var user=prompt('Note?').toLowerCase();
  switch(user){
    case 'do':
    case 're':
      console.log('mi');
      break;
    default:            #default is optional
      console.log('do');}

#For loop
  for (var i = 0; i < integer; i++){ statements };
  for (var i = 0; i < array.length; i++){ statements };
  for (var i in collection){ statements };              #collection can be an array or object
  arr.forEach(callback(element, index, array), thisArg = this)

#While loop
  while(condition===true){ statements };
    while(condition){ statements };
#Do while loop
  do { this one time and continue while loopCondition is true } while (loopCondition);

#Loop control flow statements
    if (condition) { break; }       #get out of loop
    if (condition) { continue; }    #go to next iteration
  #with label
    loop1:
    for (i = 0; i < 3; i++) {
       loop2:
       for (j = 0; j < 3; j++) {
          if (i === 1 && j === 1) {
             continue loop1;
          }
          console.log("i = " + i + ", j = " + j);
       }
    }

#-----------------------------------------------------------------------------------------------------------------
#Array []
Array is a zero-indexed heterogeneous, linear, ordered collection of elements
  #Creating array
    #with literal:
      var empty = [];
      var arrayName = [null, true, 'two'];
    #with constructor: var arrayName = new Array();
  #Array length: array.length
  #Add data value to an array
    array.push(data);     :=    array[array.length] = data
  #Accessing element by index
    var element = array[index];
    the [] converts any expression inside it toString
  #Delete array's element
      delete array[index]       #make the array's value at index === undefined
      array.splice(index, n)    #delete n elements from index and decrement the name of all elements to the right
        array.splice(index, 1)  #delete array's value at index
    delete will leave a hole in the array, while splice will decrement the names of each elements to the right
  #Sorting numerical array
    arrayName.sort(function(a,b){return a-b})
  #Iterating over an array to print every elements in it
    arrayName.forEach(function(element, index, currentArray){/* function body */})
  #Extending Array's method
    Array.prototype.lala = function(){alert("lala")}
    var arrayName = []; arrayName.lala = function(){alert("lala")}

#-----------------------------------------------------------------------------------------------------------------
Object data properties' attributes
Each object data property has not only the name-value pair, but also 3 attributes (that are set to true by default):
  configurable: specifies whether the property can be deleted or changed
  enumerable:   specifies whether the property can be returned in a for/in loop
  writable:     specifies whether the property can be changed
Objects' attributes: prototype, class, extensible
Object.prototype.constructor returns a reference to the constructor function that created the instance's prototype

#Object {}
Object: mutable keyed collections
  #Object literal notation
    var objectName = {                  #never forget the comma
      key       : value,                #key a.k.a property
      methodName: function(parameters){ #defining function a.k.a method
        codes },                        #you must end the method with comma, no ; is allowed inside the object bracket
      "class"     : value};             #use string if the key name is illegal
    var emptyObject = {};
  #Object constructor (constructor notation)
    var objectName = new Object();        #Object must be capitalized
    objectName.key = value;
    objectName.methodName = function (parameter) { codes }
    objectName["class"] = value;
  #Enumeration
    for(var i=0; i<objectName.length; i++){
      console.log(i);}                      #print keys (NOT value of keys)
    for (var i in objectName){
      if (typeof objectName[i] !== 'function') {
      #if ( objectName.hasOwnProperty(objectName[i]) )
        console.log(objectName[i]);}}};     #print value of keys
   #Ordered enumeration
    var properties = [objectName's keys array];
    for (var i = 0; i < properties.length; i++) {
      console.log(objectName[i]);};
  #Retrieval
    objectName.key      #dot notation
    objectName["key"]   #bracket notation     #use this when you can't use dot notation, don't forget the ""
  #Reflection
    typeof myObj.name
    myObj.hasOwnProperty('name')  #this only include non-inherited properties
    'name' in myObj               #this will include inherited properties
  #Delete object properties
    delete.objectName.key
  #Properties: variables associated with an object.
    objectName.variableName = value;  #Assigning value to property
    #private variable: var _parameter=value
      you can only access private variables using public method
  #Method: a function associated with an object
    objectName.methodName= function (parameter){codes;};
    #Calling method: objectName.methodName()
    #Method can be public or private. The syntax to create them is also similar.
      #Accessing private method using public method
        this.publicMethod=function(){return privateMethod}
        #don't use (). privateMethod() will the result of calling that method and NOT returns the method itself.

#-----------------------------------------------------------------------------------------------------------------
#Class encapsulation
  When creating class function, combine the Constructor and Prototype pattern
    Constructor pattern for properties that are unique to an object
    Prototype pattern for properties that are owned by the class and for methods

#Constructor
  function ClassName(parameter1,parameter2) { #constructor functions must be Capitalized (convention)
    this.parameter1 = argument1;              #defining property in class
    this.parameter2 = 'value';                #you can use value instead of argument
    var _parameter  = value;                  #a private variable
    this.methodName = function() {            #defining method in class
      codes
    }
  }
  #Instantiate object from class
    var objectName = new ClassName(argument1, argument2);
  #New function
    What the new function does is:
      create a new object inheriting from the constructor's prototype (ClassName.prototype)
      invoke the constructor function, bind this keyword to the newly created object
      return this (the newly created object)
        if constructor function doesn't explicitly return an object, the object created in step 1 is used
  #Constructor property
    whenever you overwrite an object’s prototype        #ClassName.prototype = {}
      you also overwrite the object’s constructor property
      so you have to set it manually                    #constructor: ClassName,
#Functional Constructor
  JS Good Part p.52

#Object Specifiers
  instead of requesting numerous parameters: function ClassName(f, l, m, c, s);
    write the constructor to accept a single object specifier: function ClassName( {first: f, last: l, ...} )
  
#Prototype
  #Prototype property
    every JavaScript function has a prototype property (empty by default)
    attach properties and methods on this prototype property when you want to implement inheritance
    some web browser have a __proto__ “pseudo” property that allows you to access an object’s prototype property
  #Prototype attribute (prototype object)
    an object’s prototype attribute points to the object’s parent
    it is set automatically when you create a new object
  #2 general ways an object’s prototype attribute is set when an object is created
    if an object is created with an object literal (var newObj = {}),
      it inherits properties from Object.prototype
      its prototype object (or prototype attribute) is Object.prototype
    if an object is created from a constructor function e.g. new Object (), new Fruit (), new Array () or new Anything ()
      it inherits from that constructor (Object (), Fruit (), Array (), or Anything ())
      e.g. any object created with the Array constructor ( var a = new Array() ) inherits from Array.prototype
      all built-in constructors were created from the Object constructor, and as such their prototype is Object.prototype
  #Extending the prototype property
    ClassName.prototype.key = value;
    ClassName.prototype.newMethod = function(parameter) { codes; };
  #Overwrite prototype
    ClassName.prototype = {
      constructor : ClassName,
      methodName  : function() { codes; },
      key         : value };
  #Inheriting prototype attribute by changing the class's prototype attribute
    ChildClass.prototype = new ParentClass();
  #Delegation with prototype chain
    If JS encounters a name it can't find in the current class's methods or properties,
    it looks up the prototype chain to see if it's defined in a class that it inherits from.
    This keeps going upwards until it stops all the way at the top: Object.prototype
    By default, all classes inherit directly from Object, unless we change the class's prototype

#Class inheritance example:
  function ParentClass(a){
    this.a = a;
  }
  function ChildClass(a,b){
    ParentClass.call(this,a);
    this.b = b;
  }
  ChildClass.prototype = Object.create(ParentClass.prototype);
  ChildClass.prototype.constructor = ChildClass;
#Old version:
    var Person = function(firstName, lastName, age){
      this.firstName = firstName;
      this.lastName = lastName;
      this.age = age;
    }

    Person.prototype.fullName = function(){
      return this.firstName + " " + this.lastName;
    };
    var Spy = function(firstName, lastName, age){
      this.firstName = firstName;
      this.lastName = lastName;
      this.age = age;
    };

    Spy.prototype = new Person();

    Spy.prototype.spy = function(){
      alert(this.fullName() + " is spying.");
    }

    var mySpy = new Spy("Mr.", "Spy", 50);
    mySpy.spy();

#Class inheritance
  Object.create = function (o) {
        function F() {}
​      F.prototype = o;
        return new F();
    };
  #Instantiate the object
  var cars = {type:"sedan", wheels:4​ };
​  ​var toyota = Object.create (cars);
#Parasitic Combination Inheritance Pattern
  function inheritPrototype(childObject, parentObject) {
    var copyOfParent = Object.create(parentObject.prototype);
    copyOfParent.constructor = childObject;
    childObject.prototype = copyOfParent;            }
  #Instantiate the object
    first, instantiate the object using the constructor pattern
    then, call the inheritPrototype function to overwrite the prototype of childObject with the prototype of parentObject
    finally, (if necessary) extend the childObject prototype

#This
    function go() { console.debug(this); };          go();    ->  window
    var obj= { go: function() { console.debug(this); } };  obj.go();  ->  obj
    function MyClass() { this.go = function() { console.debug(this); } }
    var instance1 = new MyClass(); var instance2 = new MyClass();
    instance1.go(); -> instance1
    instance2.go(); -> instance2
  this: a reference to the context object of the executing method
  this is assigned the value of the object where the function is invoked, not where the function is defined
  jQuery library automatically binds this to the selector object that invokes the event handler
  if you want to override the default this definition you can use .bind(), .apply(), or .call() method
    see Manipulate function context
  closures (inner functions) cannot access the outer function’s "this"
    to fix the problem, store the this as a variable inside the outer function

#-----------------------------------------------------------------------------------------------------------------
#Module and Namespace

#Import
#Import default

#Export
#Export default

#-----------------------------------------------------------------------------------------------------------------
#JSON methods
  #serialize to JSON string: var string = JSON.stringify (objectName);
  #deserialize JSON: var objectName = JSON.parse (string);

#-----------------------------------------------------------------------------------------------------------------
#Asynchronous JavaScript

#Callbacks
  #definition:
    function callback(value){ /* callback body */ }
    function callback(error, result){ /* callback body */ }
    (error, result) => { /* callback body */ }
  #usage:
    higherOrderFunction(callback)

#Promises
  #definition:
    function executor (resolve, reject) {
      /* asynchronous operations here */
      success ? resolve(value) : reject(error)
    }
    let promise = new Promise(executor)
  #usage:
    promise.then(console.log)
    promise.then(function(value){
      /* executes if success (promise fulfilled) */
    }).catch(function(error){
      /* error handling executed if unsuccessful (promise rejected) */
    }).finally(function(){
      /* executes whether promise is fulfilled or rejected */
    })
  #using function to create promise dynamically
    function myAsyncFunction(url) {
      return new Promise((resolve, reject) => {
        /* do some asynchronous thing with url */
        /* then resolve or reject the promise */
      });
    }
#Promise Methods
  Promise.resolve(value)        //automatically create and return a fulfilled promise
  Promise.reject(error)         //automatically create and return a rejected promise
  Promise.all(array)
    the array can contain both promises and normal value
    returns a single Promise that resolves when all of the promises in the argument have resolved
    rejects with the reason (error) of the first promise that rejects
    if fulfilled, will return an array with the results of all the array as elements
      the order of elements in return value array corresponds to the order of promise in array
  Promise.race(array)
    the array can contain both promises and normal value
    returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects
    in essence, the promises will race and only the fastest promise (whether it's fulfilled or rejected) will be returned

#Async-Await
  await keyword is only valid inside async functions
  await expression pauses the execution of the async function and waits for the passed Promise's resolution,
    and then resumes the async function's execution and returns the resolved value
#async function definition:
  async function asynchronousFunction() {
    var value = await promise
    /* do something with value */
  }
#Example:
  function resolveAfter2Seconds() {
    return new Promise(resolve => { setTimeout(() => {resolve('resolved')}, 2000) });
  }
  async function asynchronousFunction() {
    var result = await resolveAfter2Seconds();
    return result
  }
#Promise method with async-await
  #Promise.resolve(value) := await value
    //if the value of the expression following the await operator is not a Promise, it's converted to a resolved Promise
    async function willResolve(){
      //the 2 lines below is similar
      let value = Promise.resolve("value (not a promise)")
      let value = await "value (not a promise)"

      return value
    }
  #Promise.reject(error) := throw error
    async function willReject(){
      let error = new Error("error message")

      //the 2 lines below is similar
      return Promise.reject(error)
      throw error
    }
  #Promise.all(array) := [await asynchronousFunction, await asynchronousFunction, ...]
    async function functionName(){
      //with asynchronous function inside array
      let value = [await 1, await [2, 3], "just a value (not a promise)", await willResolve(), await asynchronousFunction()]
      //with promises inside array
      let value = await Promise.all(promise, promise, promise, 1, [2,3])

      console.log(value) //value will be an array
    }
  #Promise.race(array)
    async function functionName(){
      let value = await Promise.race(promise, promise, promise)
      console.log(value) //value will be an array
    }
#Error Handling
  #with try catch:
    async function functionName(){
      try {
        /* do asynchronous operation that can fail here */
      } catch (error) {
        /* error handling */
      }
    }
  #with higher order function:
    //make a function that doesn't handle error (e.g. willReject)
    //make a function to handle that error
      function handleError(fn){
        return function(...params){
          return fn(...params).catch(function(error){
            /* error handling */
          })
        }
      }
      //short version of the same function:
      const handleError = fn => (...params) => fn(...params).catch((error) => { /* error handling */ })
    //wrap the function that doesn't handle error inside the handleError function (currying)
      const safeReject = handleError(willReject)
    //use the safe (error-handled version) of the function
      safeReject()
  #handle the error directly
    asynchronousFunction().catch(function(error){
      /* error handling */
    })

#Different patterns of execution for asynchronous operation
  var sequentialStart = async function() {
    const slow = await resolveAfter2Seconds();
    const fast = await resolveAfter1Second();   //this will executes after the above function is done
    console.log(slow);
    console.log(fast);
  }
  var concurrentStart_withAwait = async function() {
    const slow = resolveAfter2Seconds();
    const fast = resolveAfter1Second();   //starts timer immediately

    console.log(await slow);
    console.log(await fast); //waits for slow to finish, even though fast is already done!
  }
  var stillConcurrent_withPromiseAll = function() {
    Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {
      console.log(messages[0]); // slow
      console.log(messages[1]); // fast
    });
  }
  var parallel = function() {
    resolveAfter2Seconds().then(console.log);
    resolveAfter1Second().then(console.log);
  }