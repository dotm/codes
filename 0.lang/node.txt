#Hello World App

!main.js -----------
var http = require("http");

http.createServer(function (request, response) {
  // Send the HTTP header
  // HTTP Status: 200 : OK
  // Content Type: text/plain
  response.writeHead(200, {'Content-Type': 'text/plain'});

  // Send the response body as "Hello World"
  response.end('Hello World\n');
}).listen(8081);

// Console will print the message
console.log('Server running at http://127.0.0.1:8081/');
EOF -------------------

!cmd.exe -------
node main.js

#---------------------------------------------------------------------------------------
#REPL

You can use underscore (_) to get the last result

#REPL Commands
ctrl + c - terminate the current command.
ctrl + c twice - terminate the Node REPL.
ctrl + d - terminate the Node REPL.
Up/Down Keys - see command history and modify previous commands.
Tab Keys - list of current commands.
.help - list of all commands.
.break - exit from multiline expression.
.clear - exit from multiline expression.
.save filename - save the current Node REPL session to a file.
.load filename - load file content in current Node REPL session.
.editor - enter editor mode
.exit - exit the repl

#---------------------------------------------------------------------------------------
#NPM

#Common commands
  npm help
  npm install npm -g            #update npm
  npm init                      #generate package.json
    npm init --scope=<username>
  npm install moduleName [-g]
  npm uninstall moduleName
    uninstall := rm
  npm update                    #update all of your dependencies to the max version you allow in your package.json
    npm update := npm outdated (then automatically run npm install on all outdated dependencies)
  npm ls [moduleName] [-g]      #list dependencies and name of current package/version type
    list := ls
    npm ls must be executed from nodejs folder
    npm ls [moduleName] can be used to check module version or to check if module exist
  npm search moduleName
    Using module in js file: var moduleName = require('moduleName');
  npm whoami    #see who you're logged in as
  npm adduser   #create new account
  npm test      #run the test script specified at package.json
  npm publish   #publish package

#Global vs Local Installation
  #Local
    By default, NPM installs any dependency in the local mode. 
    Local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. 
    Locally deployed packages are accessible via require() method.
  #Global
    Globally installed packages/dependencies are stored in system directory. 
    Such dependencies can be used in CLI (Command Line Interface) function of any node.js 
      but cannot be imported using require() in Node application directly.

#package.json
  package.json is present in the root directory of any Node application/module 
    and is used to define the properties of a package.
#Attributes of Package.json
  name - name of the package
  version - version of the package
  description - description of the package
  homepage - homepage of the package
  author - author of the package
  contributors - name of the contributors to the package
  dependencies - list of dependencies. NPM automatically installs all the dependencies mentioned here in the node_module folder of the package.
  repository - repository type and URL of the package
  main - entry point of the package
  keywords - keywords
#dependencies vs devDependencies
  dependencies are required to run, e.g. express.js  devDependencies only to develop, e.g. unit tests, transpilation, minification, etc.

#Update module
  Update package.json and change the version of the dependency to be updated
    1.2.3
    ^ ^ ^
    | | `-- Patch version. Update for every change.
    | `---- Minor version. Update for API additions.
    `------ Major version. Update for breaking API changes.
  run the following command: npm update (you can also run: npm publish)
#Create a Module
  Creating a module requires package.json to be generated.
  "npm init" will generate the basic skeleton of the package.json.
  You will need to provide all the required information about your module.
  Once package.json is generated, use "npm adduser" to register yourself with NPM repository site using a valid email address.
  Then publish your module: npm publish
  If everything is fine with your module, 
    it will be published in the repository 
    and will be accessible to install using NPM
  
#Distribution Tags (dist-tag)
    npm dist-tag add <pkg>@<version> [<tag>]
    npm dist-tag rm <pkg> <tag>
    npm dist-tag ls [<pkg>]
    npm help dist-tag
  dist-tag maps strings like "latest" to version numbers like "1.2.48"
  By default, the "latest" version is what gets installed. 
  When you publish, the version that you publish gets tagged as "latest".
    you publish things when you're ready for users to use them, isn't it?
  if you need to publish something, and *not* make it the default version of a package,
    then you can manually manage these distribution tags with 'dist-tag' command.
  
#---------------------------------------------------------------------------------------
#Callback Concept
  Callback is an asynchronous equivalent for a function. 
  callback function is called at the completion of a given task. 
  All the APIs of Node are written in such a way that they support callbacks.
    So there is no blocking (wait for operation) in Node.
    This makes Node.js highly scalable, as it can process a high number of requests
      without waiting for any function to return results.

#Blocking Code Example
  var fs = require("fs");
  var data = fs.readFileSync('input.txt');
  console.log(data.toString());
  console.log("Program Ended");
#Non-Blocking Code Example
  var fs = require("fs");
  fs.readFile('input.txt', function (err, data) {
    if (err) return console.error(err);
    console.log(data.toString());
  });
  console.log("Program Ended");

#---------------------------------------------------------------------------------------
#Event Loop
  Node.js is a single-threaded application,
    but it can support concurrency via the concept of event and callbacks.
  Every API of Node.js is asynchronous and being single-threaded,
    they use async function calls to maintain concurrency.
  Node uses observer pattern.
  Node thread keeps an event loop and whenever a task gets completed,
    it fires the corresponding event which signals the event-listener function to execute.
#Event-Driven Programming
  Node.js uses events heavily.
  As soon as Node starts its server, it simply
    initiates its variables, declares functions, and then simply waits for the event to occur.
  In an event-driven application, there is generally a main loop that listens for events,
    and then triggers a callback function when one of those events is detected.
  
                           +-------------->
  EventEmitters --> Events +  Event Loop  + Event Handlers
                           <--------------+
  
  Callback functions are called when an asynchronous function returns its result, 
    whereas event handling works on the observer pattern.  The functions that listen to events act as Observers.
    Whenever an event gets fired, its listener function starts executing. 
  Node.js has multiple in-built events available through events module and EventEmitter class
    which are used to bind events and event-listeners as follows:
      // Import events module
      var events = require('events');
      // Create an eventEmitter object
      var eventEmitter = new events.EventEmitter();
      // Bind event and even handler as follows
      eventEmitter.on('eventName', eventHandler);
      // Fire an event programmatically
      eventEmitter.emit('eventName');

  In Node Application, any async function accepts a callback as the last parameter
    and a callback function accepts an error as the first parameter.
      fs.readFile('input.txt', function (err, data) {
        if (err){
          console.log(err.stack);
          return;
        }
        console.log(data.toString());
      });
      
#---------------------------------------------------------------------------------------
#Event Emitter
  Many objects in a Node emit events
  All objects which emit events are the instances of events.EventEmitter
#EventEmitter Class
  As we have seen in the previous section, EventEmitter class lies in the events module.
    // Import events module
    var events = require('events');
    // Create an eventEmitter object
    var eventEmitter = new events.EventEmitter();
  When an EventEmitter instance faces any error, it emits an 'error' event.
  When a new listener is added, 'newListener' event is fired 
  When a listener is removed, 'removeListener' event is fired.
  EventEmitter provides multiple properties like on and emit.
    on property is used to bind a function with the event
    emit is used to fire an event

#Methods
  addListener(event, listener)
  on(event, listener)
  once(event, listener)
  removeListener(event, listener)
  removeAllListeners([event])
  setMaxListeners(n)
  listeners(event)
  emit(event, [arg1], [arg2], [...])
#Class Methods
  listenerCount(emitter, event)
#Events
  newListener
  removeListener

#---------------------------------------------------------------------------------------
#Buffers
  While dealing with TCP streams or the file system, it's necessary to handle octet streams. 
  Node provides Buffer class which provides instances to store raw data similar to an array of integers 
    but corresponds to a raw memory allocation outside the V8 heap.

#Creating Buffers
  var buf = new Buffer(10);                               #create an uninitiated Buffer of 10 octets
  var buf = new Buffer([10, 20, 30, 40, 50]);             #create a Buffer from a given array
  var buf = new Buffer("Simply Easy Learning", "utf-8");  #create a Buffer from a given string and optionally encoding type
    other encodings: "ascii", "utf8", "utf16le", "ucs2", "base64" or "hex".

#Writing to Buffers
  buf.write(string[, offset][, length][, encoding])
     string - the string data to be written to buffer.
     offset - the index of the buffer to start writing at. Default value is 0.
     length - the number of bytes to write. Defaults to buffer.length.
     encoding - the encoding to use. 'utf8' is the default encoding.
  This write method returns the number of octets written.
    buf = new Buffer(256);
    len = buf.write("Simply Easy Learning"); len = 20
  If there is not enough space in the buffer to fit the entire string,
    it will write a part of the string.
    
#Reading from Buffers
  buf.toString([encoding][, start][, end])
     encoding - Encoding to use. 'utf8' is the default encoding.
     start - Beginning index to start reading, defaults to 0.
     end - End index to end reading, defaults is complete buffer.
  This method decodes and returns a string from buffer data
    encoded using the specified character set encoding.
    
#Convert Buffer to JSON
  buf.toJSON()
  This method returns a JSON-representation of the Buffer instance.
  
#Concatenate Buffers
  Buffer.concat(list[, totalLength])
     list - Array List of Buffer objects to be concatenated.
     totalLength - This is the total length of the buffers when concatenated.
  This method returns a Buffer instance.
    var buffer1 = new Buffer('TutorialsPoint ');
    var buffer2 = new Buffer('Simply Easy Learning');
    var buffer3 = Buffer.concat([buffer1,buffer2]);
    
#Compare Buffers
  buf.compare(otherBuffer);
    var result = buffer1.compare(buffer2);
    if(result < 0) {
      console.log(buffer1 +" comes before " + buffer2);
    }else if(result == 0){
      console.log(buffer1 +" is same as " + buffer2);
    }else {
      console.log(buffer1 +" comes after " + buffer2);
    }
  This method returns a number indicating whether it
    comes before or after or is the same as the otherBuffer in sort order.
  
#Copy Buffer
  buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])
     targetBuffer - Buffer object where buffer will be copied.
     targetStart - Number, Optional, Default: 0
     sourceStart - Number, Optional, Default: 0
     sourceEnd - Number, Optional, Default: buffer.length
    
#Slice Buffer
  buf.slice([start][, end])
     start - Number, Optional, Default: 0
     end - Number, Optional, Default: buffer.length
  This method returns a new buffer
    which references the same memory as the old one,
    but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes.
  Negative indexes start from the end of the buffer.
  
#Check Buffer Length: buf.length;

#Buffer.isEncoding(encoding)
  Returns true if the encoding is a valid encoding argument, false otherwise.
  
#Buffer.isBuffer(obj)
  Tests if obj is a Buffer.
  
#---------------------------------------------------------------------------------------
#Streams
  Streams are objects that let you read data from a source
    or write data to a destination in continuous fashion.
  In Node.js, there are four types of streams:
     Readable - Stream which is used for read operation.
     Writable - Stream which is used for write operation.
     Duplex - Stream which can be used for both read and write operation.
     Transform - A type of duplex stream where the output is computed based on input.
  Each type of Stream is an EventEmitter instance and throws several events at different instance of times. 
  Some of the commonly used events are:
     data - This event is fired when there is data is available to read.
     end - This event is fired when there is no more data to read.
     error - This event is fired when there is any error receiving or writing data.
     finish - This event is fired when all the data has been flushed to underlying system.
  
#Reading from a Stream
  var fs = require("fs");
  var data = '';
  // Create a readable stream
  var readerStream = fs.createReadStream('input.txt');
  // Set the encoding to be utf8.
  readerStream.setEncoding('UTF8');
  // Handle stream events --> data, end, and error
  readerStream.on('data', function(chunk) {
    data += chunk;
  });
  readerStream.on('end',function(){
    console.log(data);
  });
  readerStream.on('error', function(err){
    console.log(err.stack);
  });
  console.log("Program Ended");
  
#Writing to a Stream
  var fs = require("fs");
  var data = 'Simply Easy Learning';
  // Create a writable stream
  var writerStream = fs.createWriteStream('output.txt');
  // Write the data to stream with encoding to be utf8
  writerStream.write(data,'UTF8');
  // Mark the end of file
  writerStream.end();
  // Handle stream events --> finish, and error
  writerStream.on('finish', function() {
    console.log("Write completed.");
  });
  writerStream.on('error', function(err){
    console.log(err.stack);
  });
  console.log("Program Ended");
  
#Piping the Streams
  var fs = require("fs");
  // Create a readable stream
  var readerStream = fs.createReadStream('input.txt');
  // Create a writable stream
  var writerStream = fs.createWriteStream('output.txt');
  // Pipe the read and write operations
  // read input.txt and write data to output.txt
  readerStream.pipe(writerStream);
  console.log("Program Ended");
  
#Chaining the Streams
  var fs = require("fs");
  var zlib = require('zlib');
  // Compress the file input.txt to input.txt.gz
  fs.createReadStream('input.txt')
    .pipe(zlib.createGzip())
    .pipe(fs.createWriteStream('input.txt.gz'));
  console.log("File Compressed.");

#---------------------------------------------------------------------------------------
#File System (File I/O)
  Every method in the fs module has synchronous as well as asynchronous forms.
  Asynchronous methods take the last parameter as the completion function callback
    and the first parameter of that callback function is error.
    
#Open a file
#Get File Information
#Writing a File
#Reading a Fil
#Closing a File
#Truncate a File
#Delete a File
#Create a Directory
#Read a Directory
#Remove a Directory

#---------------------------------------------------------------------------------------
#Global Objects

#__filename: the filename of the code being executed
  console.log( __filename );  -> /web/com/1427091028_21099/main.js
#__dirname: the directory name that the currently executing script resides in
  console.log( __dirname );   -> /web/com/1427091028_21099
  
#setTimeout(cb, ms): run callback cb after at least ms milliseconds sleep time.
  function printHello(){console.log( "Hello, World!");}
  setTimeout(printHello, 2000);
#clearTimeout (t)
    var t = setTimeout(printHello, 2000);
    clearTimeout(t);
  stop a timer that was previously created with setTimeout().
    the callback inside setTimeout won't get executed
  t is the timer returned by the setTimeout() function.

#setInterval(cb, ms): run callback cb repeatedly after at least ms milliseconds.
  setInterval(printHello, 2000);
#clearInterval(t)
  var t = setInterval(printHello, 2000);
  clearInterval(t);
  
#Console: used to print information on stdout and stderr
  console.log
  console.error
  console.dir
  console.trace
#console.time(label)
  console.time("Getting data");
  //
  // Do some processing here...
  //
  console.timeEnd('Getting data');

#Process: used to get information on current process. provides multiple events related to process activities.
#Process Events
  The process object is an instance of EventEmitter and emits the following events:
    exit: Emitted when the process is about to exit.
    beforeExit: emitted when node empties its event loop and has nothing else to schedule.
    uncaughtException: Emitted when an exception bubbles all the way back to the event loop. 
      If a listener is added for this exception,
        the default action (which is to print a stack trace and exit) will not occur.
    Signal Events: Emitted when the processes receives a signal such as SIGINT, SIGHUP, etc.
#Exit codes (see docs)
#Process Properties
  process.stdout
  process.stderr
  process.stdin
  process.argv
  
#---------------------------------------------------------------------------------------
#Utility Modules