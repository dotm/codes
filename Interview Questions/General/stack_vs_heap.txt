## Stack and Heap
    are stored in computer RAM

## Stack vs. Heap

Each thread gets a stack, while there's typically only one heap for the application.

When a function is called, a block is reserved on the top of the stack
    for local variables, passed arguments, and return address.
    When that function returns, the block becomes unused
    and can be used the next time a function is called.
    The stack is always reserved in a stack (last in first out) order;
        the most recently reserved block is always the next block to be freed.
    This makes it really simple to keep track of the stack;
        freeing a block from the stack is nothing more than adjusting one pointer.

The heap is memory set aside for dynamic allocation.
    There's no enforced pattern to the allocation and deallocation of blocks from the heap;
    you can allocate a block at any time and free it at any time.
    This makes it much more complex to keep track
        of which parts of the heap are allocated or free at any given time

The stack is attached to a thread,
    so when the thread exits the stack is reclaimed.
The heap is typically allocated at application startup by the language runtime,
    and is reclaimed when the application (i.e. process) exits.

Variables created on the
    stack will go out of scope and are automatically deallocated.
    heap must be destroyed manually and never fall out of scope.
        The data is freed with delete, delete[], or free.

Use the stack if you know exactly
    how much data you need to allocate
    before compile time and it is not too big.
Use the heap if you don't know exactly
    how much data you will need at run time
    or if you need to allocate a lot of data.

The size of the stack is set when a thread is created.
    It has a maximum size already determined when your program starts.
The size of the heap is set on application startup,
    but can grow as space is needed.

Stack can overflow when too much of the stack is used 
    (mostly from infinite or too deep recursion, very large allocations).
Heap memory overload can cause memory leaks.

Data created on the stack can be used without pointers.
Data created on the heap will be pointed to by pointers and allocated with new or malloc respectively.

Variables on the stack are much faster to allocate in comparison to variables on the heap.
    One of the reason is because pushing and popping from the stack is faster.

Another performance hit for the heap is that
    the heap, being mostly a global resource,
    typically has to be multi-threading safe,
    i.e. each allocation and deallocation needs to be (typically)
    synchronized with "all" other heap accesses in the program.