#################################################################################
General

#Statements
Comments
  Single-line
  Multi-line
Input/Output
  String input
  String output
    Multi-line string output
    printf
  Serialization and Deserialization (Parsing)
    JSON
    XML
  File I/O
  Command line arguments input
Date and Time
  create
    date object
    current date
  display
    date to string with format
    date to locale
    time from now
    time from date
    time to now
    time to date
  from date time get/set
    millisecond
    second
    minute
    hour
    day name (e.g. Monday)
    date of month (e.g. 31)
    date of year (e.g. 360)
    week of year
    month
    year
  from date time
    get start of (year, month, week, day, hour, minute, second)
    get end of (year, month, week, day, hour, minute, second)
    get difference from another date
    get number of days in certain month
  to date time
    add
    subtract
  check if date
    is today
    is between 2 dates
    is same with another date
    is after another date
    is same with or after another date
    is before another date
    is same with or before another date
Hold execution (sleep, halt) (wait for a certain time delay before resuming program execution)

#Etc.
Data types
  Boolean value
  Number
  String
  null value
  reference types
Type reflection (find data types of a variable)
Type conversion
Type alias
Operators
  Arithmetic operators: + - * / % ^
    Compound assignment operators
    Increment and decrement operators
  Boolean/Logical operators: and or not
    short circuit operator
  Comparison operators: < <= > >= == !=
    Shallow equality: equality of references
    Deep equality: equality of values
  Bitwise operators: and or not xor left-shift right-shift
  Basic mathematics operations
    random number generator
    max
    min
    abs
    cos
    sin
    tan
    pi
    exp
    sqrt
    floor
    ceiling
    round
Access Control
  Access Levels
HTTP REST function
Exception Handling / Error Handling
  try-catch-finally
    conditional catch (catch a certain type of exception only)
    nested try-catch-finally
  Raising exception / Throwing error
  User-defined exception / error

#--------------------------------------------------------------------------------
String
(mutable immutable, is an array of character)
  access by index
  get index of character
    first occurrence
    last occurrence
  get string length
  reverse
  uppercase
  lowercase
  capitalize
  concatenate
  repeat
  interpolation
  strip (trailing space, leading space, both)
  pad (with trailing space, leading space, both)
  substring (slicing into two array based on position)
  split (into array of substring based on delimiter)
  include (check if a string includes a substring)
  replace substring
  check if string
    is empty
    starts with substring
    ends with substring
    is alphanumeric
    is alphabet
    is digit
    is whitespace
Regex
  find (if exists)
    find global
  find position
    find position global
  replace
    replace global

#################################################################################
Imperative, Structured, Procedural

#Statements
Local variable declaration
Local variable definition (assignment)
Global variable declaration
Global variable definition (assignment)
Constant declaration
Constant definition

#--------------------------------------------------------------------------------
Conditional

If statement
Ternary operator statement
  condition ? expression : expression
Switch statement

#--------------------------------------------------------------------------------
Loop

For loop
While loop
Do while loop

Iterate over data structures (array, object)

Control Transfer Statements
  break out of loop
    break with goto (label)
  continue to next iteration
    continue with goto (label)

#--------------------------------------------------------------------------------
Procedure

#--------------------------------------------------------------------------------
Array
is ordered collections of values
is pass-by-value
is pass-by-reference (available functionalities: copy, identity operator/reference equality)
(zero index, homogeneous heterogeneous, fixed-length variable-length)
  create (declaration and definition)
  length
  access element by index
  access element by value
  change element value at index
  insert (assign), edit (reassign) element by index
  add and get value (get := access, return, then remove that value)
    pop (get last)
    push (add to last)
    shift (get first)
    unshift (add to first)
    stack operations: push, pop
    queue operations: push, shift
  delete element
    by index
      single element
      multiple elements
    by value
      with condition
  sort
    ascending
    descending
  iteration over array 
    for each (by index and value)
    map
    filter
  concatenate
  slicing (like substring but for array)
  copy (if pass-by-reference)
    shallow copy
    deep copy
  max
  min
  sum
  first
  last
  reverse
  get unique elements
  emptying
  join into string (with separator)
  check if an element is in array
  
Multidimensional array

Extending array with User Defined Function

Range array

#--------------------------------------------------------------------------------
Associative array
is unordered collections of key-value associations
is pass-by-reference (available functionalities: copy, identity operator/reference equality)
  create (declaration and definition)
  access value by key
    static access (dot notation)
    dynamic access (with string evaluation)
  add key-value pair
  edit key-value pair
  delete key-value pair
    by key
    by value
      with condition
  sort
  copy (if pass-by-reference)
    shallow copy
    deep copy
  get list of
    keys
    values
  iteration over associative array
    for each (by key and value)
    map
    filter
  
Extending associative array with User Defined Function

#--------------------------------------------------------------------------------
Tuple
  create
  unpacking
  
#--------------------------------------------------------------------------------
Set
is unordered collections of unique values
is pass-by-value
is pass-by-reference (available functionalities: copy, identity operator/reference equality)
  create
  length
  sort
  insert element
  delete element
  contains
  
  union
    in A or B
  intersection
    in A and B
  difference
    in A not in B
  symmetric difference
    in A xor B (exclude elements that is in both A and B)
  
  check if a set
    is subset to another set
    is strict subset to another set
      (if both sets are equal, return false)
    is superset to another set
    is disjoint to another set
#--------------------------------------------------------------------------------
Enumeration
is pass-by-value
is pass-by-reference (available functionalities: copy, identity operator/reference equality)
  definition
  usage
  
#--------------------------------------------------------------------------------
Module (used to store constant and function)

Creating module
Export module

Import module (from another file)
  Import
  Import as (alias)
  Selective import (don't import all)
  Qualified import (import but refer to the imported entity using fully qualified name)
  
Package (directory of modules that can contains subpackages)

#################################################################################
Functional

Function
(first-class object, can be overloaded)
  Declaration
  Definition
  Call
  Change context
  Default arguments (if arguments are not supplied, use default value)
    Optional parameter (some arguments use null as default value)
  Variadic function (variable number of arguments)
Anonymous function (Lambda)
Higher order function
  Closure (a function with access to the referencing environment)
  Nested function
  Callback (a function passed to another function as an argument)
  Currying (a function that return another function after filling it with some arguments)
Function composition
Common iteration function
  sort
  filter
  map
  each
  reduce/fold
  list comprehension (map + filter)
  
Pattern matching
Guards
Where binding clause
Let binding

Type signature
User-defined types
  Defining new type

#--------------------------------------------------------------------------------
Module (see Module above)
  FP Module
  
#################################################################################
Class-Based Object Oriented Programming

#--------------------------------------------------------------------------------
Class
  Attribute := variable attached to a class or object
  Method := function attached to a class or object
  use (this self) keyword to refer to object instance

Creating class (with parameter or object specifier for init method)
  Initialization (init method)
    using object specifier ({a: 1, b: 2, ...}) instead of requesting multiple parameter (a, b, ...)
  Attribute declaration and definition: 
    global (public) and local (private) attribute
    class and instance (object) attribute
  Method declaration and definition: 
    global (public) and local (private) method
    class and instance (object) method
  Access class attribute from method
  Access instance attribute from method
  Call private (class or instance) method from public method
  Access private (class or instance) variable from public method

Object
is pass-by-value
is pass-by-reference (available functionalities: copy, identity operator/reference equality)
  Create object (Instantiating class)

get class attribute
get object attribute
set class attribute
set object attribute
call class method
call object method
accessor method
  getter setter

Inheritance
  Access superclass attribute and method
  Attribute and method overriding
  Preventing override of attribute and method
  final class (can't be subclassed)

Interface

Reflection (list all attributes or methods)
  
Abstract class
Nested class

Class relationship
  Association
  Aggregation
  Composition
  
#--------------------------------------------------------------------------------
Module (see Module above)
  OOP Module

#################################################################################
Event-Driven (Asynchronous) Programming

Callback function
Listeners
Promises
Generator