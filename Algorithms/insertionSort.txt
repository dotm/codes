// Insertion Sort
  // For all element in the array (except the first one at index zero)
    // Take an element
    // Compare it with all the sorted element left-to-right (smallest-to-biggest/ascending)
      // If it's greater than the compared element, compare it to the next one
      // Else if it's less than or equal to the compared element, stop comparing and put it to the left of the last compared element
  // Return the result of insertion sort

// Insertion Sort
  // For all element in the array (except the first one at index zero)
    // Take an unsorted element
    // Compare it with all the sorted element in right-to-left order (biggest-to-smallest / descending)
    // starting from the element just at the left of current unsorted element
      // If it's less than the compared element,
        // Swap both element and continue comparing
      // Else if it's greater than or equal to the compared element,
        // Leave the element as is and stop comparing
  // Return the result of insertion sort

/* Tests */
// Structural Basis Testing
1.Nominal (covered in generic nominal case)
2.When input array is less than 1 (covered in generic test)
3.Throw error if array length is negative (covered in generic test)
4.Swap the unsorted element with sorted element if unsorted element is less than sorted element
5.Don't swap the unsorted element with sorted element if unsorted element is greater than sorted element
