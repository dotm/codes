Principles of Chaos Engineering

Chaos Engineering: the discipline of experimenting on a system
    in order to build confidence in the system’s capability
    to withstand turbulent conditions in production.

## Chaos in Practice

Chaos Engineering can be thought of as the facilitation of experiments to uncover systemic weaknesses.

These experiments follow four steps:
- Start by defining steady state
    - steady state: some measurable output of a system that indicates normal behavior.
- Hypothesize that this steady state will continue in both the control group and the experimental group.
- Introduce variables that reflect real world events
    - e.g. servers crash, hard drives malfunction, network disconnected, etc.
- Try to disprove the hypothesis by looking for a difference in steady state
    between the control group and the experimental group.

The harder it is to disrupt the steady state, the more confidence we have in the behavior of the system.
If a weakness is uncovered, we now have a target for improvement before that behavior manifests in the system at large.

## Advanced Principles

The following principles describe an ideal application of Chaos Engineering.
The degree to which these principles are pursued strongly correlates
to the confidence we can have in a distributed system at scale.

- Build a Hypothesis around Steady State Behavior
    - Focus on the measurable output of a system, rather than internal attributes of the system.
    - Measurements of that output over a short period of time constitute a proxy for the system’s steady state.
    - Example metrics: system’s throughput, error rates, latency percentiles, etc.
    - By focusing on systemic behavior patterns during experiments,
        we verifies that the system does work, rather than trying to validate how it works.
- Vary Real-world Events
    - Chaos variables should reflect real-world events.
    - Prioritize events either by potential impact or estimated frequency.
    - Any event capable of disrupting steady state is a potential variable in a Chaos experiment.
        - Consider events:
            - that correspond to hardware failures:
                like servers dying, software failures like malformed responses,
            - and non-failure events:
                like a spike in traffic or a scaling event
- Run Experiments in Production
    - To guarantee both authenticity of the way in which the system is exercised
        and relevance to the current deployed system,
        Chaos strongly prefers to experiment directly on production traffic.
- Automate Experiments to Run Continuously
    - Automate experiments and run them continuously.
    - Automation both orchestration and analysis.
- Minimize Blast Radius
    - While there must be an allowance for some short-term negative impact,
        Chaos Engineer must ensure the fallout from experiments are minimized and contained.