#Configuring Git
  system-wide: git config --system <key> <value>
  user specific: git config --global <key> <value>
  per repository: git config <key> <value>
#Must know config commands
  git config --global user.name "dotm"
  git config --global user.email "desde.el.mar96@gmail.com"
  git config --system core.editor vim
  git config --list
#Create a shortcut for a Git command
  git config --global alias.<alias-name> <git-command>
  git config --global alias.st status
    usage: git st
  git config --global alias.unstage 'reset HEAD --'
    usage: git unstage filename
  git config --global alias.last 'log -1 HEAD'
    usage: git last
#Open global configuration file in a text editor for manual editing
  git config --global --edits

#Git help overview
  git help <verb>
  git <verb> --help
  git <verb> -h
  man git-<verb>

#-----------------------------------------------------------------------------------
git init
git clone <url> <optional dirname>
git status
git log

#Check difference
  #of un-staged files: git diff
  #of staged files: git diff --staged
  #with UI tool: git difftool
#See difference from last commit: git diff HEAD
  HEAD: a pointer that holds your position within all your different commits.
  By default HEAD points to your most recent commit

#Staging changes
    git add <filename>
    git add '*.txt'
  #Add all: git add .
#Unstaging file: git reset HEAD <filename>

#Discard changes (after last commit)
  git checkout -- <filename>

#Committing repo:
  git commit
  git commit -m "commit message"
#Stage and commit:
  git commit -am "commit message"
#Amend last commit: git commit --amend
#Undo last commit: git reset HEAD^

#Rename or move file: git mv oldname newname
#Remove file
  git rm fileName
  git rm '*.txt'
#Remove directory: git rm -r dirname
#Untrack file but don't remove: git rm --cached filename

#-----------------------------------------------------------------------------------
#List remote repo
  #shortname only: git remote
  #with full url: git remote -v
#Add remote repo
    git remote add origin <url>
    git remote add <shortname> <url>
  the short name will be used in all git command to refer to the url 
#Push repository to remote server: git push -u origin master
  the name of our remote is origin and the default local branch name is master
  the -u tells Git to remember the parameters, so next time we can simply run 'git push'
#Fetch remote: git fetch <shortname>
#Pull remote: git pull -u origin master
  Pull := Fetch + Merge
#Rename remote repo: git remote rename <old shortname> <new shortname>
#Remove remote repo: git remote remove <shortname>

#Creating branch: git branch branch_name
#Switching branch: git checkout branch_name
  git checkout -b new_branch  := git branch new_branch; git checkout new_branch

#Merge to master
  git checkout master
  git merge branch_name

#Delete branch: git branch -d branch_name
#Force delete un-merged branch: git branch -D branch_name

#Resolving conflict best practice
- merge master into branch
- resolve all conflicts
- merge back into master (with no conflict)

#-----------------------------------------------------------------------------------
!.gitignore

# ignore all .a files
*.a
# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf