// COUNTING-SORT(originalArray, maxInteger) will sort an array at O(n)
// it assumes that the elements inside the array has bounded range (minimum value is 0 and maximum value is an integer k)
  // initialize a resultArray (that have the same length as originalArray) that will be used to hold the sorted output
  // initialize a tempArray that will be used as a temporary working storage for the count total of each integer occurence (from 0 to k) in originalArray
  // the tempArray will obviously have k index (from the maximum value) since it will store the count total of each integer from 0 to k
  // for all elements inside originalArray (from the first index to last index)
    // increment the count on tempArray for each respective integer
    // each tempArray index now store the count of all integer in originalArray
  // for all count in the tempArray except the first one: for i=1 to k (instead of: for i=0 to k)
    // add the count total of the previous index to current index iteratively (we start from i=1 since i=0 doesn't have a previous index)
    // each tempArray index now store the total number of elements that is less than or equal to the integer i in the originalArray
      // this information is used to place an element directly into its position in the output array
  // for all elements inside originalArray (from the last index to first index)
    // put it in the correct position inside the resultArray
    // decrement the count of the number that you just put inside the resultArray
  // return the resultArray

// This implementation of COUNTING-SORT is stable (you can use it for RADIX-SORT)