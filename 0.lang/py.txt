In Python, whitespace is important
nesting is marked by indentation
don't mix tab indentation and spaces indentation

# Comment

#Variable assignment
  #local: variable_name = expression
  #nonlocal:                          #works like closure
    nonlocal variable_name            #you don't have to declare nonlocal if you only want to read variable_name
    variable_name = expression        #this will assign variable_name in the closest enclosing scope (excluding global)
  #global:
    global variable_name
    variable_name = expression
#Del statement
  'del' can be used to delete (local, nonlocal, or global) variable:
    del variable_name
#Multiple assignment
  a, b = 0, 1
  a, b = b, a
#The _ variable
  in interactive mode, the last printed expression is assigned to the variable _

#String output: print('string')
  print(variable_name, variable_name, 'string') #this will automatically add space for each comma
  print(string, end=',')  #replace the default newline ending of print with comma
  print(string, end='')   #remove the default newline ending of print
#Raw string output: print(r"escape sequence like \n will be printed as is")
#Multi-line string output:
  print ('string\n'
        'string')
print("""\
the \ on the first line is to not print the \n of that line
string
string
""")

#Pass statement
  'pass' is a placeholder for expression or code block used in scaffolding

#Data types
  Number: int float decimal fraction complex
  Sequence: string list tuple range
  Iterator
  Generator
#Type reflection:
  type(object) is type      #check if object is an instance of type
  issubclass(object, type)  #check if object is a subclass of type
  isinstance(object, type)  #check if object is an instance of type or any subclass of type

#-------------------------------------------------------------------------------------
#Exception Handling
  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions
  Errors detected during execution are called exceptions
  Programs may name their own exceptions by creating a new exception class
    Exceptions should typically be derived from the Exception class, either directly or indirectly
    Exception classes are usually kept simple,
      often only offering a number of attributes
      that allow information about the error
      to be extracted by handlers for the exception.
  
#try-catch-else statement
  try:
    statements
  except ValueError:                            #conditional catch
    statements
    raise                                       #re-raise the ValueError exception
  except (RuntimeError, TypeError, NameError):  #multiple condition
    statements
    statements
  except ArithmeticError as e:
    exception_argument = e.args                 #getting arguments of an exception
  except:                                       #wildcard that catch all other exceptions
    pass                                        #do nothing
  else:
    statements                                  #executed when no exceptions occurred in the try block
  finally:
    statements                                  #always executed no matter what happens

#Raising exception
  The sole argument to raise must be either
    an exception instance or
    an exception class (a class that derives from Exception).
  If an exception class is passed,
    it will be implicitly instantiated by calling its constructor with no arguments:
      raise ValueError  # shorthand for 'raise ValueError()'
#-------------------------------------------------------------------------------------
#Operators

#Arithmetic operators: + - * / // ** %
#Comparators:
    == != <= >= < >
    is 'is not'
    in 'not in'
  #is vs ==
    a is b #evaluates whether a and b have the same memory address
    a == b #evaluates whether a and b have the same value
#Boolean operators: and or not
  #Boolean data type: True False
#Chaining operators
  1 < 2 < 3
  True and not False
  
#--------------------------------------------------------------------------------
#String
  'single line string "with inner quotes" '
  "single line string 'with inner quotes' "
  'single line string \'with inner quotes\' '
  "single line string \"with inner quotes\" "
  '''multi line string'''
  """multi line string"""

#concatenate: string + string
#repeat: string * int
#access by index: string[index]
  string[-1]    #access last character
#slicing: string[start_index, end_index]
  string[:2]    #slice from start of string
  string[2:]    #slice to end of string
  string[-2:]   #slice from second last to end of string
#length: len(string)

printf
split (into array of substring)
strip
reverse
uppercase
lowercase
capitalize
interpolation

#--------------------------------------------------------------------------------
#List
  mutable, zero index, variable-length, can be heterogeneous but usually is homogeneous
#length: len(list)
#concatenate: list + list
#repeat: list * int
#extend: list.extend(iterable)
#insert element: list.insert(index, element)
#remove
  by element: list.remove(element)
  by index: del list[index]
  by slice: del list[start:end]
  all items: del list[:]
  all items: list.clear()
#search index of element: list.index(element[, start[, end]])
#access by index: list[index]
  list[-1]    #access last character
#pop by index: list.pop(index)
#edit by index: list[index] = value
#edit by slice: list[start_index, end_index] = [value]
#slicing: list[start_index, end_index]
  list[:2]    #slice from start of list
  list[2:]    #slice to end of list
  list[-2:]   #slice from second last to end of list
#shallow copy:
  list[:]     #using slicing
  list.copy()
#check if an element is in list: element in list
#count element occurrence: list.count(element)
#sort list: list.sort(key=None, reverse=False)
#reverse list: list.reverse()

#Stack (using ordinary list)
  #add to last: list.append(element)
  #get last: list.pop()
#Queue (using collections.deque)
    from collections import deque
    queue = deque([element, element, element])
  #add to last: queue.append(element)
  #get first: queue.popleft()
  
#List Comprehensions
  [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
  
#--------------------------------------------------------------------------------
#Range: range(start, end, step)
  this returns a range object
#Get list representation of range object
  list(range(-2,5,3))   ->  [-2, 1, 4]

#--------------------------------------------------------------------------------
#Tuple
  immutable, zero index, fixed-length, can be homogeneous but usually is heterogeneous
#defining tuple (tuple packing)
  empty tuple                     : variable_name = ()
  singleton tuple                 : variable_name = element,
  tuple with more than one element: variable_name = element, element, element
#sequence unpacking with tuple
  a, b, c = (element, element, element)
  
#--------------------------------------------------------------------------------
#Set

#Defining set
  empty set     : set()
  from string   : set(string)   #will contains all unique character of the string
  non-empty set :
    set(element, element)
    {element, element}
#Set operators
  and                 : set & set
  or                  : set | set
  difference          : set - set
  symmetric difference: set ^ set
  
#Set Comprehensions
  {x for x in 'abracadabra' if x not in 'abc'}

#--------------------------------------------------------------------------------
#Dictionaries

#Defining dictionary
  {key: value, key: value}
  dict([(key, value), (key, value)])
  dict(key=value, key=value)
#get all keys: list(d.keys())
#get all sorted keys: list(sorted(d.keys()))
#delete a key: del key
#check key membership: key in dict

#--------------------------------------------------------------------------------
Conditional

#If statement
  if condition:
    statement
  elif condition:
    statement
  else:
    statement

#--------------------------------------------------------------------------------
Loop
  Loop statements may have an else clause which is executed when 
    the loop terminates through exhaustion of the list (with for)
    or when the condition becomes false (with while),
    but not executed when the loop is terminated by a break statement.
  The continue statement, continues with the next iteration of the loop
  The break statement, breaks out of a loop
  
#While loop
  while condition:
    statements
  else:
    statement

#For loop
  for i in range(5):
    print(i)
  else:
    statement
#Iterate over list by element
  for element in list:
    print(element)
#Iterate over list by index
  for i in range(len(list)):
    print(i, list[i])
#Iterate over list by index and element
  for index, value in enumerate(list):
    print(index, value)
#Iterate over list copy
  for element in list[:]:
    print(element)
#Iterate over dictionary
  for key, value in dictionary.items():
    print(key, value)
#Iterate over 2 sequences
  for a, b in zip(sequence, sequence):
    loop_body
#Iterate over a sequence in reverse
  for i in reversed(range(5)):
    print(i)
#Iterate over a sequence in sorted order
  for i in sorted(sequence):
    print(i)

#--------------------------------------------------------------------------------
#Function
  defining function in python create a function object
    function is first class object in python

#Defining function
  def function_name(parameter, parameter):
    function_body
    return value    #if you don't return any value, the default return value is 'None'
#Default parameter
  def function_name(parameter = default_value):
    function_body
    
#Calling function
  #using ordinary positional argument: function_name(argument, argument)
  #using keyword argument: function_name(argument, parameter_name = argument)
    if you use any positional argument, keyword argument must be after all positional argument
  #with sequence unpacking:
    function_name(*list)
    function_name(*tuple)
    function_name(**dictionary)
    
#Variadic function
  #definition:
    def function_name(normal_parameter, normal_parameter, *list_parameter, **dictionary_parameter):
      function_body
  #call:
    function_name(
      argument, argument,
      list_parameter_value, list_parameter_value,
      dictionary_parameter_key = dictionary_parameter_value,
      dictionary_parameter_key = dictionary_parameter_value
      )

#Lambda Expressions (Anonymous function)
  lambda parameter, parameter: expression
  lambda x, y: x + y
  
#Documentation Strings (docstring)
  def function_name(parameter, parameter):
    """
    The first line should always be a short, concise summary of the object’s purpose (begin with a capital letter and end with a period).
    
    If there are more lines in the documentation string, the second line should be blank,
    visually separating the summary from the rest of the description. 
    """
    function_body
#Get function docstring
  print(function_name.__doc__)
  
#Function Annotations
  def function_name(parameter: type, parameter: type = default_value) -> return_type:
    function_body
    
#--------------------------------------------------------------------------------
#File I/O
  #open function:
      f = open('workfile', 'w')
      read_data = f.read()
      f.close()
    open() returns a file object, and is most commonly used with two arguments: open(filename, mode).
  #with statement
      with open('workfile') as f:
        read_data = f.read()
    using with statement, you don't have to manually close the file

#--------------------------------------------------------------------------------
#Module
  module is used to store constant and function
  a module file can be imported from another python file or executed from the command line
  A module can contain executable statements as well as function definitions.
    These statements are intended to initialize the module.
    They are executed only the first time the module name is encountered in an import statement.
    They are also run if the file is executed as a script.
  When you run a Python module in command line: python module_name.py <arguments>
    the __name__ is set to "__main__"
    which means you can make the file usable as a script as well as an importable module by adding this:
      if __name__ == "__main__":
        import sys
        commandLineArgument = sys.argv[1]

#Qualified import: import module_name
#Selective import: from module_name import function_name, constant, other_module
#Import as (alias):
  import module_name as alias
  from module_name import function_name as alias

#dir function
  dir() is used to find out which names a module defines (function, variable, other imported module)
    dir(module_name)  #list the names defined in module_name
    dir(builtins)     #list the names of built-in functions and variables
    dir()             #list the names you have defined currently
    
#Packages
  The __init__.py files are required to make Python treat the directories as containing packages
     __init__.py can just be an empty file,
       but it can also execute initialization code for the package
       or set the __all__ variable
#Example package
  sound/
    __init__.py       #Initialize the sound package
    effects/
      __init__.py
      echo.py
      surround.py
      ...
    filters/
      __init__.py
      equalizer.py
      ...
#Import from package
  import sound.effects.echo
    sound.effects.echo.echofilter() #calling the function
  from sound.effects import echo
    echo.echofilter()               #calling the function
  from sound.effects.echo import echofilter
    echofilter()                    #calling the function
#Intra-package References
  !surround.py
  from . import echo
  from .. import filters
  from ..filters import equalizer
  
#Manage Packages Dependecies using Virtual Environment (venv) and pip
  https://docs.python.org/3.6/tutorial/venv.html
  
#--------------------------------------------------------------------------------
#Class
  When you define a class, a class object is created
    the class object name is the name given in the class definition
  Class objects support two kinds of operations: attribute references and instantiation
  instance_method definition must always have 'self' as its first parameter
    the 'self' will be supplied when the method is called using dot operators:
      ClassName.instance_method(object, arguments) := object.instance_method(arguments)
#Self keyword
  the self is a stand-in for the object that will be instantiated from the class
#Multiple inheritance name resolution
  For most purposes, in the simplest cases,
    you can think of the search for attributes inherited from a parent class as
    depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy (diamond inheritance)
  the method resolution order changes dynamically to support cooperative calls to super().
    This approach is known as call-next-method
  
#Creating class
  class ClassName:
    """docstring"""
    
    class_variable = 1234
    
    __private_class_variable = 'lala'
    
    def class_method():
      return 'hello world'
    
    def __init__(self, parameter):                #initialization (init method)
      self.instance_variable = parameter
      self._private_instance_variable = 'lolo'
    
    def _private_instance_method(self):
      print('private_instance_method')            #notice the 'self' doesn't have to be used
    
    def instance_method(self, parameter):
      self._private_instance_method()             #call private_instance_method
      print(self._private_instance_variable)      #access private_instance_variable
      print(self.__private_class_variable)        #access private_class_variable
      print(self.class_variable)                  #access class_variable
      print(self.instance_variable + parameter)   #access instance_variable
  
#Instantiating class
  object = ClassName(arguments)
  
#Get class attribute: ClassName.class_variable
#Get object attribute: object.instance_variable
#Call class method: ClassName.class_method(arguments)
#Call object method: object.instance_method(arguments)

#Inheritance
  #Inheriting class
    class DerivedClassName(BaseClassName):
      statements
    class DerivedClassName(module_name.BaseClassName):
      statements
  #Attribute and method overriding
  #Access superclass attribute and method
    BaseClassName.method(self, arguments)
    BaseClassName.class_variable            #to be able to access instance_variable, call the __init__ of BaseClassName from the __init__ of DerivedClassName
#Multiple Inheritance
  class DerivedClassName(Base1, Base2, Base3):
    statements
    
#Reflection (list all attributes or methods): dir(variable_name)

#Iterator
  iterator is used with for in loop
  to add iterator behavior to your classes
    define an __iter__() method which returns an object with a __next__() method
    If the class defines __next__(), then __iter__() can just return self
#Example iterator and usage
  class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def __next__(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]
  rev = Reverse('spam')
  iter(rev)
  for char in rev:
    print(char)
#Manual iteration with iter and next
  iterator = iter(iterable)
  next(iterator)
  
#Generator
  Generators are a simple and powerful tool for creating iterators.
  They are written like regular functions but use the yield statement whenever they want to return data.
  Each time next() is called on it,
    the generator resumes where it left off
    (it remembers all the data values and which statement was last executed).
  Anything that can be done with generators can also be done with class-based iterators.
  What makes generators so compact is that
    the __iter__() and __next__() methods are created automatically.
#Example generator
  def reverse(data):
    for index in range(len(data)-1, -1, -1):
        yield data[index]
  for char in reverse('golf'):
    print(char)
#Generator Expressions
  Some simple generators can be coded succinctly as expressions
    using a syntax similar to list comprehensions but with parentheses instead of square brackets.
  These expressions are designed for situations
    where the generator is used right away by an enclosing function.
#Example generator expression
  sum(i*i for i in range(10))                         #sum of squares
  xvec = [10, 20, 30]
  yvec = [7, 5, 3]
  sum(x*y for x,y in zip(xvec, yvec))                 #dot product
  list(data[i] for i in range(len(data)-1, -1, -1))   #reverse data and put each character in a list