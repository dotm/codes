// BUCKET-SORT(array)
// it assumes that the input is generated by a random process that distributes elements uniformly and independently over the interval [0,1)
  // initialize 9 buckets to store the input from 0 to and not including 1
  // for all elements in the array
    // push it into the appropriate bucket: e.g. 0.23 -> 2nd bucket; 0,05 -> 0th bucket
  // sort each bucket using any kind of sorting algorithm (even the inefficient one is OK since the elements are uniformly distributed)
  // concatenate all the buckets from the first to the last in order
  // return the result

// RANDOM-INPUT(n) will return an array of n elements (from 0 to and not including 1) for BUCKET-SORT
  // initialize a result array
  // for n times
    // generate a random number between 0 and not including 1
    // push it to the result array
  // return the result array
