To retrieve captured group in Notepad++ use: \0

#Character Classes
\c	Control character
\s	White space
\S	Not white space
\d	Digit
\D	Not digit
\w	Alphanumeric
\W	Non-alphanumeric
\x	Hexade-cimal digit
\O	Octal digit

#Special
.	      Any character except new line (\n)
\n	    New line
\r	    Carriage return
\t	    Tab
\v	    Vertical tab
\f	    Form feed
\Q	    begin literal sequence
\	      escape character
\E  	  end literal sequence

You typically use these escape sequences for
  non-printable characters or to represent byte-sized bit pattern:
\xxx	  Octal character xxx
\xhh	  Hex character hh
\uxxxx  Unicode character xxxx

#Anchors
^	  Start of string, or start of line in multi-line pattern
\A	Start of string
$   End of string, or end of line in multi-line pattern
\Z	End of string
\b	Word boundary
\B	Not word boundary
\<	Start of word
\>	End of word

#Quantifiers
*		  0 or more
+		  1 or more
?		  0 or 1
{3}		exactly 3
{3,}	3 or more
{3,5}	[3,4,5]

#Groups and Ranges
(...)		group
(.(..))	subgroup
(a|b)		a or b
(?:...)	passive (non-capturing) group
[abc]		range (a or b or c)
[^abc]	not a or b or c
[a-q]		letter from a to q
[A-Q]		upper case letter from A to Q
[0-7]		Digit from 0 to 7

#Pattern Modifiers
g	Global match
i	Case-i-nse-nsitive
m	Multiple lines
s	Treat string as single line
x	Allow comments and white space in pattern
e	Evaluate replac-ement
U	Ungreedy pattern

#Assertions
?=  		  	Lookahead assertion
?!			    Negative lookahead
?<=			    Lookbehind assertion
?!= or ?<!	Negative lookbehind
?>	    		Once-only Subexp-ression
?()			    Condition [if then]
?()|		    Condition [if then else]
?#	    		Comment

#POSIX
[:upper:] 	Upper case letters
[:lower:] 	Lower case letters
[:alpha:] 	All letters
[:alnum:] 	Digits and letters
[:digit:] 	Digits
[:xdigit:]	Hexadecimal digits
[:punct:]	  Punctuation
[:blank:] 	Space and tab
[:space:]	  Blank characters
[:cntrl:]	  Control characters
[:graph:]	  Printed characters
[:print:] 	Printed characters and spaces
[:word:]	  Digits, letters and underscore

#String Replacement
$n	nth non-passive group
$2	"-xyz-" in /^(abc-(xy-z))$/
$1	"-xyz-" in /^(?:a-bc)-(xyz)$/
$`	Before matched string
$'	After matched string
$+	Last matched string
$&	Entire matched string

#----------------------------------------------------------------------------------------
#Regex Grammar

#Regex Sequence
  contains one or more regexp factors; each factor can optionally be followed by a quantifier

#Regex factor
  regex factor can be:
    any Unicode character except: \ / [ ] ( ) { } ? + * | . ^ $
    parenthesized group
    character class
    escape sequence

#Regex escape
  anything escaped with a backslash: \
#Regex group
  any sequence between ()
#Regex class
  any sequence between []
#Regex class escape
  the same as regex escape, but \b is backspace character (not word boundary)

#Regex quantifier suffix 
  determines how many times the factor should match
  default matching is greedy
    greedy matching: matching as many repetitions as possible up to the limit, if there is one
  if the quantifier has an extra ? suffix, then matching tends to be lazy
    lazy matching: attempting to match as few repetitions as possible